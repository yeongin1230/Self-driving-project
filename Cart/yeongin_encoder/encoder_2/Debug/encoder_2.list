
encoder_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003800  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003988  08003988  00013988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080039d8  080039d8  000139d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080039e0  080039e0  000139e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080039e4  080039e4  000139e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  20000000  080039e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000200a0  2**0
                  CONTENTS
  8 .bss          00000558  200000a0  200000a0  000200a0  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200005f8  200005f8  000200a0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000fb01  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002316  00000000  00000000  0002fbd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006679  00000000  00000000  00031ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b0  00000000  00000000  00038560  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba8  00000000  00000000  00038f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005157  00000000  00000000  00039ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003e7b  00000000  00000000  0003ec0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00042a8a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001f78  00000000  00000000  00042b08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a0 	.word	0x200000a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003970 	.word	0x08003970

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a4 	.word	0x200000a4
 80001c4:	08003970 	.word	0x08003970

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2uiz>:
 8000abc:	004a      	lsls	r2, r1, #1
 8000abe:	d211      	bcs.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d211      	bcs.n	8000aea <__aeabi_d2uiz+0x2e>
 8000ac6:	d50d      	bpl.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d40e      	bmi.n	8000af0 <__aeabi_d2uiz+0x34>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d102      	bne.n	8000af6 <__aeabi_d2uiz+0x3a>
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	4770      	bx	lr
 8000af6:	f04f 0000 	mov.w	r0, #0
 8000afa:	4770      	bx	lr

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b97a 	b.w	8000e08 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	468c      	mov	ip, r1
 8000b32:	460d      	mov	r5, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	9e08      	ldr	r6, [sp, #32]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d151      	bne.n	8000be0 <__udivmoddi4+0xb4>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4617      	mov	r7, r2
 8000b40:	d96d      	bls.n	8000c1e <__udivmoddi4+0xf2>
 8000b42:	fab2 fe82 	clz	lr, r2
 8000b46:	f1be 0f00 	cmp.w	lr, #0
 8000b4a:	d00b      	beq.n	8000b64 <__udivmoddi4+0x38>
 8000b4c:	f1ce 0c20 	rsb	ip, lr, #32
 8000b50:	fa01 f50e 	lsl.w	r5, r1, lr
 8000b54:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b58:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b5c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000b60:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b64:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b68:	0c25      	lsrs	r5, r4, #16
 8000b6a:	fbbc f8fa 	udiv	r8, ip, sl
 8000b6e:	fa1f f987 	uxth.w	r9, r7
 8000b72:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b76:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b7a:	fb08 f309 	mul.w	r3, r8, r9
 8000b7e:	42ab      	cmp	r3, r5
 8000b80:	d90a      	bls.n	8000b98 <__udivmoddi4+0x6c>
 8000b82:	19ed      	adds	r5, r5, r7
 8000b84:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b88:	f080 8123 	bcs.w	8000dd2 <__udivmoddi4+0x2a6>
 8000b8c:	42ab      	cmp	r3, r5
 8000b8e:	f240 8120 	bls.w	8000dd2 <__udivmoddi4+0x2a6>
 8000b92:	f1a8 0802 	sub.w	r8, r8, #2
 8000b96:	443d      	add	r5, r7
 8000b98:	1aed      	subs	r5, r5, r3
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ba0:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ba4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ba8:	fb00 f909 	mul.w	r9, r0, r9
 8000bac:	45a1      	cmp	r9, r4
 8000bae:	d909      	bls.n	8000bc4 <__udivmoddi4+0x98>
 8000bb0:	19e4      	adds	r4, r4, r7
 8000bb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb6:	f080 810a 	bcs.w	8000dce <__udivmoddi4+0x2a2>
 8000bba:	45a1      	cmp	r9, r4
 8000bbc:	f240 8107 	bls.w	8000dce <__udivmoddi4+0x2a2>
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	443c      	add	r4, r7
 8000bc4:	eba4 0409 	sub.w	r4, r4, r9
 8000bc8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d061      	beq.n	8000c96 <__udivmoddi4+0x16a>
 8000bd2:	fa24 f40e 	lsr.w	r4, r4, lr
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	6034      	str	r4, [r6, #0]
 8000bda:	6073      	str	r3, [r6, #4]
 8000bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be0:	428b      	cmp	r3, r1
 8000be2:	d907      	bls.n	8000bf4 <__udivmoddi4+0xc8>
 8000be4:	2e00      	cmp	r6, #0
 8000be6:	d054      	beq.n	8000c92 <__udivmoddi4+0x166>
 8000be8:	2100      	movs	r1, #0
 8000bea:	e886 0021 	stmia.w	r6, {r0, r5}
 8000bee:	4608      	mov	r0, r1
 8000bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf4:	fab3 f183 	clz	r1, r3
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	f040 808e 	bne.w	8000d1a <__udivmoddi4+0x1ee>
 8000bfe:	42ab      	cmp	r3, r5
 8000c00:	d302      	bcc.n	8000c08 <__udivmoddi4+0xdc>
 8000c02:	4282      	cmp	r2, r0
 8000c04:	f200 80fa 	bhi.w	8000dfc <__udivmoddi4+0x2d0>
 8000c08:	1a84      	subs	r4, r0, r2
 8000c0a:	eb65 0503 	sbc.w	r5, r5, r3
 8000c0e:	2001      	movs	r0, #1
 8000c10:	46ac      	mov	ip, r5
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d03f      	beq.n	8000c96 <__udivmoddi4+0x16a>
 8000c16:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	b912      	cbnz	r2, 8000c26 <__udivmoddi4+0xfa>
 8000c20:	2701      	movs	r7, #1
 8000c22:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c26:	fab7 fe87 	clz	lr, r7
 8000c2a:	f1be 0f00 	cmp.w	lr, #0
 8000c2e:	d134      	bne.n	8000c9a <__udivmoddi4+0x16e>
 8000c30:	1beb      	subs	r3, r5, r7
 8000c32:	0c3a      	lsrs	r2, r7, #16
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	2101      	movs	r1, #1
 8000c3a:	fbb3 f8f2 	udiv	r8, r3, r2
 8000c3e:	0c25      	lsrs	r5, r4, #16
 8000c40:	fb02 3318 	mls	r3, r2, r8, r3
 8000c44:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c48:	fb0c f308 	mul.w	r3, ip, r8
 8000c4c:	42ab      	cmp	r3, r5
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x134>
 8000c50:	19ed      	adds	r5, r5, r7
 8000c52:	f108 30ff 	add.w	r0, r8, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x132>
 8000c58:	42ab      	cmp	r3, r5
 8000c5a:	f200 80d1 	bhi.w	8000e00 <__udivmoddi4+0x2d4>
 8000c5e:	4680      	mov	r8, r0
 8000c60:	1aed      	subs	r5, r5, r3
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c68:	fb02 5510 	mls	r5, r2, r0, r5
 8000c6c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c70:	fb0c fc00 	mul.w	ip, ip, r0
 8000c74:	45a4      	cmp	ip, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x15c>
 8000c78:	19e4      	adds	r4, r4, r7
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x15a>
 8000c80:	45a4      	cmp	ip, r4
 8000c82:	f200 80b8 	bhi.w	8000df6 <__udivmoddi4+0x2ca>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 040c 	sub.w	r4, r4, ip
 8000c8c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c90:	e79d      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c92:	4631      	mov	r1, r6
 8000c94:	4630      	mov	r0, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	f1ce 0420 	rsb	r4, lr, #32
 8000c9e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000ca2:	fa07 f70e 	lsl.w	r7, r7, lr
 8000ca6:	fa20 f804 	lsr.w	r8, r0, r4
 8000caa:	0c3a      	lsrs	r2, r7, #16
 8000cac:	fa25 f404 	lsr.w	r4, r5, r4
 8000cb0:	ea48 0803 	orr.w	r8, r8, r3
 8000cb4:	fbb4 f1f2 	udiv	r1, r4, r2
 8000cb8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000cbc:	fb02 4411 	mls	r4, r2, r1, r4
 8000cc0:	fa1f fc87 	uxth.w	ip, r7
 8000cc4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000cc8:	fb01 f30c 	mul.w	r3, r1, ip
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x1bc>
 8000cd4:	19ed      	adds	r5, r5, r7
 8000cd6:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cda:	f080 808a 	bcs.w	8000df2 <__udivmoddi4+0x2c6>
 8000cde:	42ab      	cmp	r3, r5
 8000ce0:	f240 8087 	bls.w	8000df2 <__udivmoddi4+0x2c6>
 8000ce4:	3902      	subs	r1, #2
 8000ce6:	443d      	add	r5, r7
 8000ce8:	1aeb      	subs	r3, r5, r3
 8000cea:	fa1f f588 	uxth.w	r5, r8
 8000cee:	fbb3 f0f2 	udiv	r0, r3, r2
 8000cf2:	fb02 3310 	mls	r3, r2, r0, r3
 8000cf6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cfa:	fb00 f30c 	mul.w	r3, r0, ip
 8000cfe:	42ab      	cmp	r3, r5
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x1e6>
 8000d02:	19ed      	adds	r5, r5, r7
 8000d04:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d08:	d26f      	bcs.n	8000dea <__udivmoddi4+0x2be>
 8000d0a:	42ab      	cmp	r3, r5
 8000d0c:	d96d      	bls.n	8000dea <__udivmoddi4+0x2be>
 8000d0e:	3802      	subs	r0, #2
 8000d10:	443d      	add	r5, r7
 8000d12:	1aeb      	subs	r3, r5, r3
 8000d14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d18:	e78f      	b.n	8000c3a <__udivmoddi4+0x10e>
 8000d1a:	f1c1 0720 	rsb	r7, r1, #32
 8000d1e:	fa22 f807 	lsr.w	r8, r2, r7
 8000d22:	408b      	lsls	r3, r1
 8000d24:	fa05 f401 	lsl.w	r4, r5, r1
 8000d28:	ea48 0303 	orr.w	r3, r8, r3
 8000d2c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d30:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d34:	40fd      	lsrs	r5, r7
 8000d36:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d3a:	fbb5 f9fc 	udiv	r9, r5, ip
 8000d3e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000d42:	fb0c 5519 	mls	r5, ip, r9, r5
 8000d46:	fa1f f883 	uxth.w	r8, r3
 8000d4a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d4e:	fb09 f408 	mul.w	r4, r9, r8
 8000d52:	42ac      	cmp	r4, r5
 8000d54:	fa02 f201 	lsl.w	r2, r2, r1
 8000d58:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x244>
 8000d5e:	18ed      	adds	r5, r5, r3
 8000d60:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d64:	d243      	bcs.n	8000dee <__udivmoddi4+0x2c2>
 8000d66:	42ac      	cmp	r4, r5
 8000d68:	d941      	bls.n	8000dee <__udivmoddi4+0x2c2>
 8000d6a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6e:	441d      	add	r5, r3
 8000d70:	1b2d      	subs	r5, r5, r4
 8000d72:	fa1f fe8e 	uxth.w	lr, lr
 8000d76:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d7a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000d7e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000d82:	fb00 f808 	mul.w	r8, r0, r8
 8000d86:	45a0      	cmp	r8, r4
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x26e>
 8000d8a:	18e4      	adds	r4, r4, r3
 8000d8c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d90:	d229      	bcs.n	8000de6 <__udivmoddi4+0x2ba>
 8000d92:	45a0      	cmp	r8, r4
 8000d94:	d927      	bls.n	8000de6 <__udivmoddi4+0x2ba>
 8000d96:	3802      	subs	r0, #2
 8000d98:	441c      	add	r4, r3
 8000d9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9e:	eba4 0408 	sub.w	r4, r4, r8
 8000da2:	fba0 8902 	umull	r8, r9, r0, r2
 8000da6:	454c      	cmp	r4, r9
 8000da8:	46c6      	mov	lr, r8
 8000daa:	464d      	mov	r5, r9
 8000dac:	d315      	bcc.n	8000dda <__udivmoddi4+0x2ae>
 8000dae:	d012      	beq.n	8000dd6 <__udivmoddi4+0x2aa>
 8000db0:	b156      	cbz	r6, 8000dc8 <__udivmoddi4+0x29c>
 8000db2:	ebba 030e 	subs.w	r3, sl, lr
 8000db6:	eb64 0405 	sbc.w	r4, r4, r5
 8000dba:	fa04 f707 	lsl.w	r7, r4, r7
 8000dbe:	40cb      	lsrs	r3, r1
 8000dc0:	431f      	orrs	r7, r3
 8000dc2:	40cc      	lsrs	r4, r1
 8000dc4:	6037      	str	r7, [r6, #0]
 8000dc6:	6074      	str	r4, [r6, #4]
 8000dc8:	2100      	movs	r1, #0
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	e6f8      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000dd2:	4690      	mov	r8, r2
 8000dd4:	e6e0      	b.n	8000b98 <__udivmoddi4+0x6c>
 8000dd6:	45c2      	cmp	sl, r8
 8000dd8:	d2ea      	bcs.n	8000db0 <__udivmoddi4+0x284>
 8000dda:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dde:	eb69 0503 	sbc.w	r5, r9, r3
 8000de2:	3801      	subs	r0, #1
 8000de4:	e7e4      	b.n	8000db0 <__udivmoddi4+0x284>
 8000de6:	4628      	mov	r0, r5
 8000de8:	e7d7      	b.n	8000d9a <__udivmoddi4+0x26e>
 8000dea:	4640      	mov	r0, r8
 8000dec:	e791      	b.n	8000d12 <__udivmoddi4+0x1e6>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e7be      	b.n	8000d70 <__udivmoddi4+0x244>
 8000df2:	4601      	mov	r1, r0
 8000df4:	e778      	b.n	8000ce8 <__udivmoddi4+0x1bc>
 8000df6:	3802      	subs	r0, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	e745      	b.n	8000c88 <__udivmoddi4+0x15c>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	e708      	b.n	8000c12 <__udivmoddi4+0xe6>
 8000e00:	f1a8 0802 	sub.w	r8, r8, #2
 8000e04:	443d      	add	r5, r7
 8000e06:	e72b      	b.n	8000c60 <__udivmoddi4+0x134>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <HAL_InitTick+0x3c>)
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_InitTick+0x40>)
{
 8000e12:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e14:	7818      	ldrb	r0, [r3, #0]
 8000e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1a:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e1e:	6810      	ldr	r0, [r2, #0]
 8000e20:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e24:	f000 f8aa 	bl	8000f7c <HAL_SYSTICK_Config>
 8000e28:	4604      	mov	r4, r0
 8000e2a:	b958      	cbnz	r0, 8000e44 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2c:	2d0f      	cmp	r5, #15
 8000e2e:	d809      	bhi.n	8000e44 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	4602      	mov	r2, r0
 8000e32:	4629      	mov	r1, r5
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f000 f85e 	bl	8000ef8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <HAL_InitTick+0x44>)
 8000e3e:	4620      	mov	r0, r4
 8000e40:	601d      	str	r5, [r3, #0]
 8000e42:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000e44:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000e46:	bd38      	pop	{r3, r4, r5, pc}
 8000e48:	20000034 	.word	0x20000034
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	20000004 	.word	0x20000004

08000e54 <HAL_Init>:
{
 8000e54:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <HAL_Init+0x30>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e5e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e66:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e6e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f000 f82f 	bl	8000ed4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e76:	2000      	movs	r0, #0
 8000e78:	f7ff ffc8 	bl	8000e0c <HAL_InitTick>
  HAL_MspInit();
 8000e7c:	f001 ffe2 	bl	8002e44 <HAL_MspInit>
}
 8000e80:	2000      	movs	r0, #0
 8000e82:	bd08      	pop	{r3, pc}
 8000e84:	40023c00 	.word	0x40023c00

08000e88 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e88:	4a03      	ldr	r2, [pc, #12]	; (8000e98 <HAL_IncTick+0x10>)
 8000e8a:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <HAL_IncTick+0x14>)
 8000e8c:	6811      	ldr	r1, [r2, #0]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	440b      	add	r3, r1
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	200003f0 	.word	0x200003f0
 8000e9c:	20000000 	.word	0x20000000

08000ea0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ea0:	4b01      	ldr	r3, [pc, #4]	; (8000ea8 <HAL_GetTick+0x8>)
 8000ea2:	6818      	ldr	r0, [r3, #0]
}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	200003f0 	.word	0x200003f0

08000eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eac:	b538      	push	{r3, r4, r5, lr}
 8000eae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000eb0:	f7ff fff6 	bl	8000ea0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb6:	bf1c      	itt	ne
 8000eb8:	4b05      	ldrne	r3, [pc, #20]	; (8000ed0 <HAL_Delay+0x24>)
 8000eba:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000ebc:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000ebe:	bf18      	it	ne
 8000ec0:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ec2:	f7ff ffed 	bl	8000ea0 <HAL_GetTick>
 8000ec6:	1b40      	subs	r0, r0, r5
 8000ec8:	4284      	cmp	r4, r0
 8000eca:	d8fa      	bhi.n	8000ec2 <HAL_Delay+0x16>
  {
  }
}
 8000ecc:	bd38      	pop	{r3, r4, r5, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000000 	.word	0x20000000

08000ed4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ed6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000edc:	041b      	lsls	r3, r3, #16
 8000ede:	0c1b      	lsrs	r3, r3, #16
 8000ee0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee4:	0200      	lsls	r0, r0, #8
 8000ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000eee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000ef0:	60d3      	str	r3, [r2, #12]
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efa:	b530      	push	{r4, r5, lr}
 8000efc:	68dc      	ldr	r4, [r3, #12]
 8000efe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f02:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f06:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f08:	2b04      	cmp	r3, #4
 8000f0a:	bf28      	it	cs
 8000f0c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	f04f 0501 	mov.w	r5, #1
 8000f14:	fa05 f303 	lsl.w	r3, r5, r3
 8000f18:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1c:	bf8c      	ite	hi
 8000f1e:	3c03      	subhi	r4, #3
 8000f20:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f22:	4019      	ands	r1, r3
 8000f24:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f26:	fa05 f404 	lsl.w	r4, r5, r4
 8000f2a:	3c01      	subs	r4, #1
 8000f2c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000f2e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	ea42 0201 	orr.w	r2, r2, r1
 8000f34:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	bfad      	iteet	ge
 8000f3a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	f000 000f 	andlt.w	r0, r0, #15
 8000f42:	4b06      	ldrlt	r3, [pc, #24]	; (8000f5c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f44:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	bfb5      	itete	lt
 8000f4a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000f54:	bd30      	pop	{r4, r5, pc}
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00
 8000f5c:	e000ed14 	.word	0xe000ed14

08000f60 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f60:	2800      	cmp	r0, #0
 8000f62:	db08      	blt.n	8000f76 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f64:	0942      	lsrs	r2, r0, #5
 8000f66:	2301      	movs	r3, #1
 8000f68:	f000 001f 	and.w	r0, r0, #31
 8000f6c:	fa03 f000 	lsl.w	r0, r3, r0
 8000f70:	4b01      	ldr	r3, [pc, #4]	; (8000f78 <HAL_NVIC_EnableIRQ+0x18>)
 8000f72:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000f76:	4770      	bx	lr
 8000f78:	e000e100 	.word	0xe000e100

08000f7c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f7c:	3801      	subs	r0, #1
 8000f7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f82:	d20a      	bcs.n	8000f9a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f88:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	21f0      	movs	r1, #240	; 0xf0
 8000f8c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f90:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f92:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f94:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f9a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fa8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d003      	beq.n	8000fb8 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fb8:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fba:	2305      	movs	r3, #5
 8000fbc:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000fc0:	6813      	ldr	r3, [r2, #0]
 8000fc2:	f023 0301 	bic.w	r3, r3, #1
 8000fc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000fc8:	2000      	movs	r0, #0
}
 8000fca:	4770      	bx	lr

08000fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fd0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001184 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fd8:	4a68      	ldr	r2, [pc, #416]	; (800117c <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fda:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001188 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fde:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe0:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000fe2:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fe4:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000fe6:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fe8:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000fea:	42ac      	cmp	r4, r5
 8000fec:	f040 80b0 	bne.w	8001150 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ff0:	684c      	ldr	r4, [r1, #4]
 8000ff2:	f024 0c10 	bic.w	ip, r4, #16
 8000ff6:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000ffa:	2e01      	cmp	r6, #1
 8000ffc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001000:	d812      	bhi.n	8001028 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8001002:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001004:	2603      	movs	r6, #3
 8001006:	fa06 f60e 	lsl.w	r6, r6, lr
 800100a:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800100e:	68ce      	ldr	r6, [r1, #12]
 8001010:	fa06 f60e 	lsl.w	r6, r6, lr
 8001014:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8001016:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001018:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800101a:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800101e:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001022:	409e      	lsls	r6, r3
 8001024:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8001026:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001028:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 800102a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800102c:	fa06 f60e 	lsl.w	r6, r6, lr
 8001030:	43f6      	mvns	r6, r6
 8001032:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001036:	688f      	ldr	r7, [r1, #8]
 8001038:	fa07 f70e 	lsl.w	r7, r7, lr
 800103c:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001040:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8001044:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001046:	d116      	bne.n	8001076 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8001048:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800104c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001050:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001054:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001058:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800105c:	f04f 0c0f 	mov.w	ip, #15
 8001060:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001064:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001068:	690f      	ldr	r7, [r1, #16]
 800106a:	fa07 f70b 	lsl.w	r7, r7, fp
 800106e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001072:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8001076:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001078:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800107a:	f004 0703 	and.w	r7, r4, #3
 800107e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8001082:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8001086:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001088:	00e6      	lsls	r6, r4, #3
 800108a:	d561      	bpl.n	8001150 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108c:	f04f 0b00 	mov.w	fp, #0
 8001090:	f8cd b00c 	str.w	fp, [sp, #12]
 8001094:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001098:	4e39      	ldr	r6, [pc, #228]	; (8001180 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800109e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80010a2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80010a6:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80010aa:	9703      	str	r7, [sp, #12]
 80010ac:	9f03      	ldr	r7, [sp, #12]
 80010ae:	f023 0703 	bic.w	r7, r3, #3
 80010b2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80010b6:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010ba:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80010be:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80010c6:	f04f 0e0f 	mov.w	lr, #15
 80010ca:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ce:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010d0:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010d4:	d043      	beq.n	800115e <HAL_GPIO_Init+0x192>
 80010d6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80010da:	42b0      	cmp	r0, r6
 80010dc:	d041      	beq.n	8001162 <HAL_GPIO_Init+0x196>
 80010de:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80010e2:	42b0      	cmp	r0, r6
 80010e4:	d03f      	beq.n	8001166 <HAL_GPIO_Init+0x19a>
 80010e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80010ea:	42b0      	cmp	r0, r6
 80010ec:	d03d      	beq.n	800116a <HAL_GPIO_Init+0x19e>
 80010ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80010f2:	42b0      	cmp	r0, r6
 80010f4:	d03b      	beq.n	800116e <HAL_GPIO_Init+0x1a2>
 80010f6:	4548      	cmp	r0, r9
 80010f8:	d03b      	beq.n	8001172 <HAL_GPIO_Init+0x1a6>
 80010fa:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80010fe:	42b0      	cmp	r0, r6
 8001100:	d039      	beq.n	8001176 <HAL_GPIO_Init+0x1aa>
 8001102:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001106:	42b0      	cmp	r0, r6
 8001108:	bf14      	ite	ne
 800110a:	2608      	movne	r6, #8
 800110c:	2607      	moveq	r6, #7
 800110e:	fa06 f60c 	lsl.w	r6, r6, ip
 8001112:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001116:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8001118:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800111a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800111c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001120:	bf0c      	ite	eq
 8001122:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001124:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8001126:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8001128:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800112a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800112e:	bf0c      	ite	eq
 8001130:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001132:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8001134:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001136:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001138:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800113c:	bf0c      	ite	eq
 800113e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001140:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8001142:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8001144:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001146:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001148:	bf54      	ite	pl
 800114a:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 800114c:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800114e:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001150:	3301      	adds	r3, #1
 8001152:	2b10      	cmp	r3, #16
 8001154:	f47f af45 	bne.w	8000fe2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001158:	b005      	add	sp, #20
 800115a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800115e:	465e      	mov	r6, fp
 8001160:	e7d5      	b.n	800110e <HAL_GPIO_Init+0x142>
 8001162:	2601      	movs	r6, #1
 8001164:	e7d3      	b.n	800110e <HAL_GPIO_Init+0x142>
 8001166:	2602      	movs	r6, #2
 8001168:	e7d1      	b.n	800110e <HAL_GPIO_Init+0x142>
 800116a:	2603      	movs	r6, #3
 800116c:	e7cf      	b.n	800110e <HAL_GPIO_Init+0x142>
 800116e:	2604      	movs	r6, #4
 8001170:	e7cd      	b.n	800110e <HAL_GPIO_Init+0x142>
 8001172:	2605      	movs	r6, #5
 8001174:	e7cb      	b.n	800110e <HAL_GPIO_Init+0x142>
 8001176:	2606      	movs	r6, #6
 8001178:	e7c9      	b.n	800110e <HAL_GPIO_Init+0x142>
 800117a:	bf00      	nop
 800117c:	40013c00 	.word	0x40013c00
 8001180:	40020000 	.word	0x40020000
 8001184:	40023800 	.word	0x40023800
 8001188:	40021400 	.word	0x40021400

0800118c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800118c:	b10a      	cbz	r2, 8001192 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800118e:	6181      	str	r1, [r0, #24]
 8001190:	4770      	bx	lr
 8001192:	0409      	lsls	r1, r1, #16
 8001194:	e7fb      	b.n	800118e <HAL_GPIO_WritePin+0x2>
	...

08001198 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001198:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800119c:	4604      	mov	r4, r0
 800119e:	b908      	cbnz	r0, 80011a4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80011a0:	2001      	movs	r0, #1
 80011a2:	e03f      	b.n	8001224 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a4:	6803      	ldr	r3, [r0, #0]
 80011a6:	07dd      	lsls	r5, r3, #31
 80011a8:	d410      	bmi.n	80011cc <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011aa:	6823      	ldr	r3, [r4, #0]
 80011ac:	0798      	lsls	r0, r3, #30
 80011ae:	d45a      	bmi.n	8001266 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	071a      	lsls	r2, r3, #28
 80011b4:	f100 809c 	bmi.w	80012f0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b8:	6823      	ldr	r3, [r4, #0]
 80011ba:	075b      	lsls	r3, r3, #29
 80011bc:	f100 80ba 	bmi.w	8001334 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011c0:	69a0      	ldr	r0, [r4, #24]
 80011c2:	2800      	cmp	r0, #0
 80011c4:	f040 811b 	bne.w	80013fe <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80011c8:	2000      	movs	r0, #0
 80011ca:	e02b      	b.n	8001224 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011cc:	4ba4      	ldr	r3, [pc, #656]	; (8001460 <HAL_RCC_OscConfig+0x2c8>)
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	f002 020c 	and.w	r2, r2, #12
 80011d4:	2a04      	cmp	r2, #4
 80011d6:	d007      	beq.n	80011e8 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011de:	2a08      	cmp	r2, #8
 80011e0:	d10a      	bne.n	80011f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	0259      	lsls	r1, r3, #9
 80011e6:	d507      	bpl.n	80011f8 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e8:	4b9d      	ldr	r3, [pc, #628]	; (8001460 <HAL_RCC_OscConfig+0x2c8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	039a      	lsls	r2, r3, #14
 80011ee:	d5dc      	bpl.n	80011aa <HAL_RCC_OscConfig+0x12>
 80011f0:	6863      	ldr	r3, [r4, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1d9      	bne.n	80011aa <HAL_RCC_OscConfig+0x12>
 80011f6:	e7d3      	b.n	80011a0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f8:	6863      	ldr	r3, [r4, #4]
 80011fa:	4d99      	ldr	r5, [pc, #612]	; (8001460 <HAL_RCC_OscConfig+0x2c8>)
 80011fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001200:	d113      	bne.n	800122a <HAL_RCC_OscConfig+0x92>
 8001202:	682b      	ldr	r3, [r5, #0]
 8001204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001208:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800120a:	f7ff fe49 	bl	8000ea0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120e:	4d94      	ldr	r5, [pc, #592]	; (8001460 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001210:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001212:	682b      	ldr	r3, [r5, #0]
 8001214:	039b      	lsls	r3, r3, #14
 8001216:	d4c8      	bmi.n	80011aa <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001218:	f7ff fe42 	bl	8000ea0 <HAL_GetTick>
 800121c:	1b80      	subs	r0, r0, r6
 800121e:	2864      	cmp	r0, #100	; 0x64
 8001220:	d9f7      	bls.n	8001212 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8001222:	2003      	movs	r0, #3
}
 8001224:	b002      	add	sp, #8
 8001226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800122e:	d104      	bne.n	800123a <HAL_RCC_OscConfig+0xa2>
 8001230:	682b      	ldr	r3, [r5, #0]
 8001232:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001236:	602b      	str	r3, [r5, #0]
 8001238:	e7e3      	b.n	8001202 <HAL_RCC_OscConfig+0x6a>
 800123a:	682a      	ldr	r2, [r5, #0]
 800123c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001240:	602a      	str	r2, [r5, #0]
 8001242:	682a      	ldr	r2, [r5, #0]
 8001244:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001248:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1dd      	bne.n	800120a <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 800124e:	f7ff fe27 	bl	8000ea0 <HAL_GetTick>
 8001252:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001254:	682b      	ldr	r3, [r5, #0]
 8001256:	039f      	lsls	r7, r3, #14
 8001258:	d5a7      	bpl.n	80011aa <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800125a:	f7ff fe21 	bl	8000ea0 <HAL_GetTick>
 800125e:	1b80      	subs	r0, r0, r6
 8001260:	2864      	cmp	r0, #100	; 0x64
 8001262:	d9f7      	bls.n	8001254 <HAL_RCC_OscConfig+0xbc>
 8001264:	e7dd      	b.n	8001222 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001266:	4b7e      	ldr	r3, [pc, #504]	; (8001460 <HAL_RCC_OscConfig+0x2c8>)
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	f012 0f0c 	tst.w	r2, #12
 800126e:	d007      	beq.n	8001280 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001276:	2a08      	cmp	r2, #8
 8001278:	d111      	bne.n	800129e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	025e      	lsls	r6, r3, #9
 800127e:	d40e      	bmi.n	800129e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001280:	4b77      	ldr	r3, [pc, #476]	; (8001460 <HAL_RCC_OscConfig+0x2c8>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	0795      	lsls	r5, r2, #30
 8001286:	d502      	bpl.n	800128e <HAL_RCC_OscConfig+0xf6>
 8001288:	68e2      	ldr	r2, [r4, #12]
 800128a:	2a01      	cmp	r2, #1
 800128c:	d188      	bne.n	80011a0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	6921      	ldr	r1, [r4, #16]
 8001292:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001296:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800129a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800129c:	e788      	b.n	80011b0 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800129e:	68e2      	ldr	r2, [r4, #12]
 80012a0:	4b70      	ldr	r3, [pc, #448]	; (8001464 <HAL_RCC_OscConfig+0x2cc>)
 80012a2:	b1b2      	cbz	r2, 80012d2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80012a4:	2201      	movs	r2, #1
 80012a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012a8:	f7ff fdfa 	bl	8000ea0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ac:	4d6c      	ldr	r5, [pc, #432]	; (8001460 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80012ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b0:	682b      	ldr	r3, [r5, #0]
 80012b2:	0798      	lsls	r0, r3, #30
 80012b4:	d507      	bpl.n	80012c6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b6:	682b      	ldr	r3, [r5, #0]
 80012b8:	6922      	ldr	r2, [r4, #16]
 80012ba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012be:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80012c2:	602b      	str	r3, [r5, #0]
 80012c4:	e774      	b.n	80011b0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c6:	f7ff fdeb 	bl	8000ea0 <HAL_GetTick>
 80012ca:	1b80      	subs	r0, r0, r6
 80012cc:	2802      	cmp	r0, #2
 80012ce:	d9ef      	bls.n	80012b0 <HAL_RCC_OscConfig+0x118>
 80012d0:	e7a7      	b.n	8001222 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 80012d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012d4:	f7ff fde4 	bl	8000ea0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d8:	4d61      	ldr	r5, [pc, #388]	; (8001460 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80012da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012dc:	682b      	ldr	r3, [r5, #0]
 80012de:	0799      	lsls	r1, r3, #30
 80012e0:	f57f af66 	bpl.w	80011b0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e4:	f7ff fddc 	bl	8000ea0 <HAL_GetTick>
 80012e8:	1b80      	subs	r0, r0, r6
 80012ea:	2802      	cmp	r0, #2
 80012ec:	d9f6      	bls.n	80012dc <HAL_RCC_OscConfig+0x144>
 80012ee:	e798      	b.n	8001222 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012f0:	6962      	ldr	r2, [r4, #20]
 80012f2:	4b5d      	ldr	r3, [pc, #372]	; (8001468 <HAL_RCC_OscConfig+0x2d0>)
 80012f4:	b17a      	cbz	r2, 8001316 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012fa:	f7ff fdd1 	bl	8000ea0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fe:	4d58      	ldr	r5, [pc, #352]	; (8001460 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001300:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001302:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001304:	079f      	lsls	r7, r3, #30
 8001306:	f53f af57 	bmi.w	80011b8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800130a:	f7ff fdc9 	bl	8000ea0 <HAL_GetTick>
 800130e:	1b80      	subs	r0, r0, r6
 8001310:	2802      	cmp	r0, #2
 8001312:	d9f6      	bls.n	8001302 <HAL_RCC_OscConfig+0x16a>
 8001314:	e785      	b.n	8001222 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8001316:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001318:	f7ff fdc2 	bl	8000ea0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800131c:	4d50      	ldr	r5, [pc, #320]	; (8001460 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800131e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001320:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001322:	0798      	lsls	r0, r3, #30
 8001324:	f57f af48 	bpl.w	80011b8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001328:	f7ff fdba 	bl	8000ea0 <HAL_GetTick>
 800132c:	1b80      	subs	r0, r0, r6
 800132e:	2802      	cmp	r0, #2
 8001330:	d9f6      	bls.n	8001320 <HAL_RCC_OscConfig+0x188>
 8001332:	e776      	b.n	8001222 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001334:	4b4a      	ldr	r3, [pc, #296]	; (8001460 <HAL_RCC_OscConfig+0x2c8>)
 8001336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001338:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800133c:	d128      	bne.n	8001390 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	9201      	str	r2, [sp, #4]
 8001340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001342:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001346:	641a      	str	r2, [r3, #64]	; 0x40
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134e:	9301      	str	r3, [sp, #4]
 8001350:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001352:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001354:	4d45      	ldr	r5, [pc, #276]	; (800146c <HAL_RCC_OscConfig+0x2d4>)
 8001356:	682b      	ldr	r3, [r5, #0]
 8001358:	05d9      	lsls	r1, r3, #23
 800135a:	d51b      	bpl.n	8001394 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800135c:	68a3      	ldr	r3, [r4, #8]
 800135e:	4d40      	ldr	r5, [pc, #256]	; (8001460 <HAL_RCC_OscConfig+0x2c8>)
 8001360:	2b01      	cmp	r3, #1
 8001362:	d127      	bne.n	80013b4 <HAL_RCC_OscConfig+0x21c>
 8001364:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800136c:	f7ff fd98 	bl	8000ea0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001370:	4d3b      	ldr	r5, [pc, #236]	; (8001460 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001372:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001374:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001378:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800137a:	079b      	lsls	r3, r3, #30
 800137c:	d539      	bpl.n	80013f2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800137e:	2e00      	cmp	r6, #0
 8001380:	f43f af1e 	beq.w	80011c0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001384:	4a36      	ldr	r2, [pc, #216]	; (8001460 <HAL_RCC_OscConfig+0x2c8>)
 8001386:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800138c:	6413      	str	r3, [r2, #64]	; 0x40
 800138e:	e717      	b.n	80011c0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001390:	2600      	movs	r6, #0
 8001392:	e7df      	b.n	8001354 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001394:	682b      	ldr	r3, [r5, #0]
 8001396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800139c:	f7ff fd80 	bl	8000ea0 <HAL_GetTick>
 80013a0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a2:	682b      	ldr	r3, [r5, #0]
 80013a4:	05da      	lsls	r2, r3, #23
 80013a6:	d4d9      	bmi.n	800135c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a8:	f7ff fd7a 	bl	8000ea0 <HAL_GetTick>
 80013ac:	1bc0      	subs	r0, r0, r7
 80013ae:	2802      	cmp	r0, #2
 80013b0:	d9f7      	bls.n	80013a2 <HAL_RCC_OscConfig+0x20a>
 80013b2:	e736      	b.n	8001222 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b4:	2b05      	cmp	r3, #5
 80013b6:	d104      	bne.n	80013c2 <HAL_RCC_OscConfig+0x22a>
 80013b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013ba:	f043 0304 	orr.w	r3, r3, #4
 80013be:	672b      	str	r3, [r5, #112]	; 0x70
 80013c0:	e7d0      	b.n	8001364 <HAL_RCC_OscConfig+0x1cc>
 80013c2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80013c4:	f022 0201 	bic.w	r2, r2, #1
 80013c8:	672a      	str	r2, [r5, #112]	; 0x70
 80013ca:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80013cc:	f022 0204 	bic.w	r2, r2, #4
 80013d0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1ca      	bne.n	800136c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80013d6:	f7ff fd63 	bl	8000ea0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013da:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80013de:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013e2:	0798      	lsls	r0, r3, #30
 80013e4:	d5cb      	bpl.n	800137e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e6:	f7ff fd5b 	bl	8000ea0 <HAL_GetTick>
 80013ea:	1bc0      	subs	r0, r0, r7
 80013ec:	4540      	cmp	r0, r8
 80013ee:	d9f7      	bls.n	80013e0 <HAL_RCC_OscConfig+0x248>
 80013f0:	e717      	b.n	8001222 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f2:	f7ff fd55 	bl	8000ea0 <HAL_GetTick>
 80013f6:	1bc0      	subs	r0, r0, r7
 80013f8:	4540      	cmp	r0, r8
 80013fa:	d9bd      	bls.n	8001378 <HAL_RCC_OscConfig+0x1e0>
 80013fc:	e711      	b.n	8001222 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013fe:	4d18      	ldr	r5, [pc, #96]	; (8001460 <HAL_RCC_OscConfig+0x2c8>)
 8001400:	68ab      	ldr	r3, [r5, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b08      	cmp	r3, #8
 8001408:	d047      	beq.n	800149a <HAL_RCC_OscConfig+0x302>
 800140a:	4e19      	ldr	r6, [pc, #100]	; (8001470 <HAL_RCC_OscConfig+0x2d8>)
 800140c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800140e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001410:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001412:	d135      	bne.n	8001480 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001414:	f7ff fd44 	bl	8000ea0 <HAL_GetTick>
 8001418:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800141a:	682b      	ldr	r3, [r5, #0]
 800141c:	0199      	lsls	r1, r3, #6
 800141e:	d429      	bmi.n	8001474 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001420:	6a22      	ldr	r2, [r4, #32]
 8001422:	69e3      	ldr	r3, [r4, #28]
 8001424:	4313      	orrs	r3, r2
 8001426:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001428:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800142c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800142e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001432:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001434:	4c0a      	ldr	r4, [pc, #40]	; (8001460 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001436:	0852      	lsrs	r2, r2, #1
 8001438:	3a01      	subs	r2, #1
 800143a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800143e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001440:	2301      	movs	r3, #1
 8001442:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001444:	f7ff fd2c 	bl	8000ea0 <HAL_GetTick>
 8001448:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800144a:	6823      	ldr	r3, [r4, #0]
 800144c:	019a      	lsls	r2, r3, #6
 800144e:	f53f aebb 	bmi.w	80011c8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001452:	f7ff fd25 	bl	8000ea0 <HAL_GetTick>
 8001456:	1b40      	subs	r0, r0, r5
 8001458:	2802      	cmp	r0, #2
 800145a:	d9f6      	bls.n	800144a <HAL_RCC_OscConfig+0x2b2>
 800145c:	e6e1      	b.n	8001222 <HAL_RCC_OscConfig+0x8a>
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	42470000 	.word	0x42470000
 8001468:	42470e80 	.word	0x42470e80
 800146c:	40007000 	.word	0x40007000
 8001470:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001474:	f7ff fd14 	bl	8000ea0 <HAL_GetTick>
 8001478:	1bc0      	subs	r0, r0, r7
 800147a:	2802      	cmp	r0, #2
 800147c:	d9cd      	bls.n	800141a <HAL_RCC_OscConfig+0x282>
 800147e:	e6d0      	b.n	8001222 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8001480:	f7ff fd0e 	bl	8000ea0 <HAL_GetTick>
 8001484:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001486:	682b      	ldr	r3, [r5, #0]
 8001488:	019b      	lsls	r3, r3, #6
 800148a:	f57f ae9d 	bpl.w	80011c8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800148e:	f7ff fd07 	bl	8000ea0 <HAL_GetTick>
 8001492:	1b00      	subs	r0, r0, r4
 8001494:	2802      	cmp	r0, #2
 8001496:	d9f6      	bls.n	8001486 <HAL_RCC_OscConfig+0x2ee>
 8001498:	e6c3      	b.n	8001222 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800149a:	2801      	cmp	r0, #1
 800149c:	f43f aec2 	beq.w	8001224 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 80014a0:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014a2:	69e3      	ldr	r3, [r4, #28]
 80014a4:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 80014a8:	429a      	cmp	r2, r3
 80014aa:	f47f ae79 	bne.w	80011a0 <HAL_RCC_OscConfig+0x8>
 80014ae:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014b0:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b4:	4293      	cmp	r3, r2
 80014b6:	f47f ae73 	bne.w	80011a0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014c0:	4003      	ands	r3, r0
 80014c2:	4293      	cmp	r3, r2
 80014c4:	f47f ae6c 	bne.w	80011a0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80014c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014ca:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80014ce:	4293      	cmp	r3, r2
 80014d0:	f47f ae66 	bne.w	80011a0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80014d6:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 80014da:	1ac0      	subs	r0, r0, r3
 80014dc:	bf18      	it	ne
 80014de:	2001      	movne	r0, #1
 80014e0:	e6a0      	b.n	8001224 <HAL_RCC_OscConfig+0x8c>
 80014e2:	bf00      	nop

080014e4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014e4:	4913      	ldr	r1, [pc, #76]	; (8001534 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80014e6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014e8:	688b      	ldr	r3, [r1, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	d003      	beq.n	80014fa <HAL_RCC_GetSysClockFreq+0x16>
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d003      	beq.n	80014fe <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014f6:	4810      	ldr	r0, [pc, #64]	; (8001538 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80014f8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80014fa:	4810      	ldr	r0, [pc, #64]	; (800153c <HAL_RCC_GetSysClockFreq+0x58>)
 80014fc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014fe:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001500:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001502:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001504:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001508:	bf14      	ite	ne
 800150a:	480c      	ldrne	r0, [pc, #48]	; (800153c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800150c:	480a      	ldreq	r0, [pc, #40]	; (8001538 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800150e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001512:	bf18      	it	ne
 8001514:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001516:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800151a:	fba1 0100 	umull	r0, r1, r1, r0
 800151e:	f7ff faed 	bl	8000afc <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <HAL_RCC_GetSysClockFreq+0x50>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800152a:	3301      	adds	r3, #1
 800152c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800152e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001532:	bd08      	pop	{r3, pc}
 8001534:	40023800 	.word	0x40023800
 8001538:	00f42400 	.word	0x00f42400
 800153c:	007a1200 	.word	0x007a1200

08001540 <HAL_RCC_ClockConfig>:
{
 8001540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001544:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001546:	4604      	mov	r4, r0
 8001548:	b910      	cbnz	r0, 8001550 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800154a:	2001      	movs	r0, #1
 800154c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001550:	4b44      	ldr	r3, [pc, #272]	; (8001664 <HAL_RCC_ClockConfig+0x124>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	f002 020f 	and.w	r2, r2, #15
 8001558:	428a      	cmp	r2, r1
 800155a:	d329      	bcc.n	80015b0 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800155c:	6821      	ldr	r1, [r4, #0]
 800155e:	078f      	lsls	r7, r1, #30
 8001560:	d42e      	bmi.n	80015c0 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001562:	07c8      	lsls	r0, r1, #31
 8001564:	d441      	bmi.n	80015ea <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001566:	4b3f      	ldr	r3, [pc, #252]	; (8001664 <HAL_RCC_ClockConfig+0x124>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	f002 020f 	and.w	r2, r2, #15
 800156e:	4295      	cmp	r5, r2
 8001570:	d367      	bcc.n	8001642 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001572:	6822      	ldr	r2, [r4, #0]
 8001574:	0751      	lsls	r1, r2, #29
 8001576:	d46d      	bmi.n	8001654 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001578:	0713      	lsls	r3, r2, #28
 800157a:	d507      	bpl.n	800158c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800157c:	4a3a      	ldr	r2, [pc, #232]	; (8001668 <HAL_RCC_ClockConfig+0x128>)
 800157e:	6921      	ldr	r1, [r4, #16]
 8001580:	6893      	ldr	r3, [r2, #8]
 8001582:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001586:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800158a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800158c:	f7ff ffaa 	bl	80014e4 <HAL_RCC_GetSysClockFreq>
 8001590:	4b35      	ldr	r3, [pc, #212]	; (8001668 <HAL_RCC_ClockConfig+0x128>)
 8001592:	4a36      	ldr	r2, [pc, #216]	; (800166c <HAL_RCC_ClockConfig+0x12c>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800159a:	5cd3      	ldrb	r3, [r2, r3]
 800159c:	40d8      	lsrs	r0, r3
 800159e:	4b34      	ldr	r3, [pc, #208]	; (8001670 <HAL_RCC_ClockConfig+0x130>)
 80015a0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80015a2:	4b34      	ldr	r3, [pc, #208]	; (8001674 <HAL_RCC_ClockConfig+0x134>)
 80015a4:	6818      	ldr	r0, [r3, #0]
 80015a6:	f7ff fc31 	bl	8000e0c <HAL_InitTick>
  return HAL_OK;
 80015aa:	2000      	movs	r0, #0
 80015ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b0:	b2ca      	uxtb	r2, r1
 80015b2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	4299      	cmp	r1, r3
 80015bc:	d1c5      	bne.n	800154a <HAL_RCC_ClockConfig+0xa>
 80015be:	e7cd      	b.n	800155c <HAL_RCC_ClockConfig+0x1c>
 80015c0:	4b29      	ldr	r3, [pc, #164]	; (8001668 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015c6:	bf1e      	ittt	ne
 80015c8:	689a      	ldrne	r2, [r3, #8]
 80015ca:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80015ce:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d0:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015d2:	bf42      	ittt	mi
 80015d4:	689a      	ldrmi	r2, [r3, #8]
 80015d6:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80015da:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	68a0      	ldr	r0, [r4, #8]
 80015e0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80015e4:	4302      	orrs	r2, r0
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	e7bb      	b.n	8001562 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ea:	6862      	ldr	r2, [r4, #4]
 80015ec:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <HAL_RCC_ClockConfig+0x128>)
 80015ee:	2a01      	cmp	r2, #1
 80015f0:	d11d      	bne.n	800162e <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f8:	d0a7      	beq.n	800154a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015fa:	4e1b      	ldr	r6, [pc, #108]	; (8001668 <HAL_RCC_ClockConfig+0x128>)
 80015fc:	68b3      	ldr	r3, [r6, #8]
 80015fe:	f023 0303 	bic.w	r3, r3, #3
 8001602:	4313      	orrs	r3, r2
 8001604:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001606:	f7ff fc4b 	bl	8000ea0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800160a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800160e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001610:	68b3      	ldr	r3, [r6, #8]
 8001612:	6862      	ldr	r2, [r4, #4]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800161c:	d0a3      	beq.n	8001566 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800161e:	f7ff fc3f 	bl	8000ea0 <HAL_GetTick>
 8001622:	1bc0      	subs	r0, r0, r7
 8001624:	4540      	cmp	r0, r8
 8001626:	d9f3      	bls.n	8001610 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001628:	2003      	movs	r0, #3
}
 800162a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800162e:	1e91      	subs	r1, r2, #2
 8001630:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001632:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001634:	d802      	bhi.n	800163c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001636:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800163a:	e7dd      	b.n	80015f8 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163c:	f013 0f02 	tst.w	r3, #2
 8001640:	e7da      	b.n	80015f8 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001642:	b2ea      	uxtb	r2, r5
 8001644:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 030f 	and.w	r3, r3, #15
 800164c:	429d      	cmp	r5, r3
 800164e:	f47f af7c 	bne.w	800154a <HAL_RCC_ClockConfig+0xa>
 8001652:	e78e      	b.n	8001572 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001654:	4904      	ldr	r1, [pc, #16]	; (8001668 <HAL_RCC_ClockConfig+0x128>)
 8001656:	68e0      	ldr	r0, [r4, #12]
 8001658:	688b      	ldr	r3, [r1, #8]
 800165a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800165e:	4303      	orrs	r3, r0
 8001660:	608b      	str	r3, [r1, #8]
 8001662:	e789      	b.n	8001578 <HAL_RCC_ClockConfig+0x38>
 8001664:	40023c00 	.word	0x40023c00
 8001668:	40023800 	.word	0x40023800
 800166c:	08003988 	.word	0x08003988
 8001670:	20000034 	.word	0x20000034
 8001674:	20000004 	.word	0x20000004

08001678 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <HAL_RCC_GetPCLK1Freq+0x14>)
 800167a:	4a05      	ldr	r2, [pc, #20]	; (8001690 <HAL_RCC_GetPCLK1Freq+0x18>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001682:	5cd3      	ldrb	r3, [r2, r3]
 8001684:	4a03      	ldr	r2, [pc, #12]	; (8001694 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001686:	6810      	ldr	r0, [r2, #0]
}
 8001688:	40d8      	lsrs	r0, r3
 800168a:	4770      	bx	lr
 800168c:	40023800 	.word	0x40023800
 8001690:	08003998 	.word	0x08003998
 8001694:	20000034 	.word	0x20000034

08001698 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <HAL_RCC_GetPCLK2Freq+0x14>)
 800169a:	4a05      	ldr	r2, [pc, #20]	; (80016b0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80016a2:	5cd3      	ldrb	r3, [r2, r3]
 80016a4:	4a03      	ldr	r2, [pc, #12]	; (80016b4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80016a6:	6810      	ldr	r0, [r2, #0]
}
 80016a8:	40d8      	lsrs	r0, r3
 80016aa:	4770      	bx	lr
 80016ac:	40023800 	.word	0x40023800
 80016b0:	08003998 	.word	0x08003998
 80016b4:	20000034 	.word	0x20000034

080016b8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016b8:	6a03      	ldr	r3, [r0, #32]
 80016ba:	f023 0301 	bic.w	r3, r3, #1
 80016be:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016c0:	6a03      	ldr	r3, [r0, #32]
{
 80016c2:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016c4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80016c6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80016c8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80016ca:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80016ce:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80016d0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80016d2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80016d6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80016d8:	4d0e      	ldr	r5, [pc, #56]	; (8001714 <TIM_OC1_SetConfig+0x5c>)
 80016da:	42a8      	cmp	r0, r5
 80016dc:	d002      	beq.n	80016e4 <TIM_OC1_SetConfig+0x2c>
 80016de:	4e0e      	ldr	r6, [pc, #56]	; (8001718 <TIM_OC1_SetConfig+0x60>)
 80016e0:	42b0      	cmp	r0, r6
 80016e2:	d110      	bne.n	8001706 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80016e4:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80016e6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80016ea:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80016ec:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80016ee:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80016f2:	d002      	beq.n	80016fa <TIM_OC1_SetConfig+0x42>
 80016f4:	4d08      	ldr	r5, [pc, #32]	; (8001718 <TIM_OC1_SetConfig+0x60>)
 80016f6:	42a8      	cmp	r0, r5
 80016f8:	d105      	bne.n	8001706 <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80016fa:	694d      	ldr	r5, [r1, #20]
 80016fc:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80016fe:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001702:	4335      	orrs	r5, r6
 8001704:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001706:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001708:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800170a:	684a      	ldr	r2, [r1, #4]
 800170c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800170e:	6203      	str	r3, [r0, #32]
 8001710:	bd70      	pop	{r4, r5, r6, pc}
 8001712:	bf00      	nop
 8001714:	40010000 	.word	0x40010000
 8001718:	40010400 	.word	0x40010400

0800171c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800171c:	6a03      	ldr	r3, [r0, #32]
 800171e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001722:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001724:	6a03      	ldr	r3, [r0, #32]
{
 8001726:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001728:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800172a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800172c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800172e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001732:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001734:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001736:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800173a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800173e:	4d11      	ldr	r5, [pc, #68]	; (8001784 <TIM_OC3_SetConfig+0x68>)
 8001740:	42a8      	cmp	r0, r5
 8001742:	d003      	beq.n	800174c <TIM_OC3_SetConfig+0x30>
 8001744:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001748:	42a8      	cmp	r0, r5
 800174a:	d114      	bne.n	8001776 <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800174c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800174e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001752:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001756:	4d0b      	ldr	r5, [pc, #44]	; (8001784 <TIM_OC3_SetConfig+0x68>)
 8001758:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800175a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800175e:	d003      	beq.n	8001768 <TIM_OC3_SetConfig+0x4c>
 8001760:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001764:	42a8      	cmp	r0, r5
 8001766:	d106      	bne.n	8001776 <TIM_OC3_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001768:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800176a:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800176c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001770:	4335      	orrs	r5, r6
 8001772:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001776:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001778:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800177a:	684a      	ldr	r2, [r1, #4]
 800177c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800177e:	6203      	str	r3, [r0, #32]
 8001780:	bd70      	pop	{r4, r5, r6, pc}
 8001782:	bf00      	nop
 8001784:	40010000 	.word	0x40010000

08001788 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001788:	6a03      	ldr	r3, [r0, #32]
 800178a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800178e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001790:	6a03      	ldr	r3, [r0, #32]
{
 8001792:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001794:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001796:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001798:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800179a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800179e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80017a2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80017a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80017a8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80017ac:	4d08      	ldr	r5, [pc, #32]	; (80017d0 <TIM_OC4_SetConfig+0x48>)
 80017ae:	42a8      	cmp	r0, r5
 80017b0:	d003      	beq.n	80017ba <TIM_OC4_SetConfig+0x32>
 80017b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017b6:	42a8      	cmp	r0, r5
 80017b8:	d104      	bne.n	80017c4 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80017ba:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80017bc:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80017c0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017c4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80017c6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80017c8:	684a      	ldr	r2, [r1, #4]
 80017ca:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80017cc:	6203      	str	r3, [r0, #32]
 80017ce:	bd30      	pop	{r4, r5, pc}
 80017d0:	40010000 	.word	0x40010000

080017d4 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017d4:	6803      	ldr	r3, [r0, #0]
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	f042 0201 	orr.w	r2, r2, #1
 80017dc:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017e4:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 80017e6:	bf1e      	ittt	ne
 80017e8:	681a      	ldrne	r2, [r3, #0]
 80017ea:	f042 0201 	orrne.w	r2, r2, #1
 80017ee:	601a      	strne	r2, [r3, #0]
}
 80017f0:	2000      	movs	r0, #0
 80017f2:	4770      	bx	lr

080017f4 <HAL_TIM_PWM_MspInit>:
 80017f4:	4770      	bx	lr

080017f6 <HAL_TIM_Encoder_Start>:
{
 80017f6:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 80017f8:	b189      	cbz	r1, 800181e <HAL_TIM_Encoder_Start+0x28>
 80017fa:	2904      	cmp	r1, #4
 80017fc:	d007      	beq.n	800180e <HAL_TIM_Encoder_Start+0x18>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80017fe:	6a1a      	ldr	r2, [r3, #32]
 8001800:	f022 0201 	bic.w	r2, r2, #1
 8001804:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001806:	6a1a      	ldr	r2, [r3, #32]
 8001808:	f042 0201 	orr.w	r2, r2, #1
 800180c:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 800180e:	6a1a      	ldr	r2, [r3, #32]
 8001810:	f022 0210 	bic.w	r2, r2, #16
 8001814:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001816:	6a1a      	ldr	r2, [r3, #32]
 8001818:	f042 0210 	orr.w	r2, r2, #16
 800181c:	e006      	b.n	800182c <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 800181e:	6a1a      	ldr	r2, [r3, #32]
 8001820:	f022 0201 	bic.w	r2, r2, #1
 8001824:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001826:	6a1a      	ldr	r2, [r3, #32]
 8001828:	f042 0201 	orr.w	r2, r2, #1
 800182c:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	f042 0201 	orr.w	r2, r2, #1
 8001834:	601a      	str	r2, [r3, #0]
}
 8001836:	2000      	movs	r0, #0
 8001838:	4770      	bx	lr

0800183a <HAL_TIM_OC_DelayElapsedCallback>:
 800183a:	4770      	bx	lr

0800183c <HAL_TIM_IC_CaptureCallback>:
 800183c:	4770      	bx	lr

0800183e <HAL_TIM_PWM_PulseFinishedCallback>:
 800183e:	4770      	bx	lr

08001840 <HAL_TIM_TriggerCallback>:
 8001840:	4770      	bx	lr

08001842 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001842:	6803      	ldr	r3, [r0, #0]
 8001844:	691a      	ldr	r2, [r3, #16]
 8001846:	0791      	lsls	r1, r2, #30
{
 8001848:	b510      	push	{r4, lr}
 800184a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800184c:	d50e      	bpl.n	800186c <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800184e:	68da      	ldr	r2, [r3, #12]
 8001850:	0792      	lsls	r2, r2, #30
 8001852:	d50b      	bpl.n	800186c <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001854:	f06f 0202 	mvn.w	r2, #2
 8001858:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800185a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800185c:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800185e:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001860:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001862:	d077      	beq.n	8001954 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001864:	f7ff ffea 	bl	800183c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001868:	2300      	movs	r3, #0
 800186a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800186c:	6823      	ldr	r3, [r4, #0]
 800186e:	691a      	ldr	r2, [r3, #16]
 8001870:	0750      	lsls	r0, r2, #29
 8001872:	d510      	bpl.n	8001896 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	0751      	lsls	r1, r2, #29
 8001878:	d50d      	bpl.n	8001896 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800187a:	f06f 0204 	mvn.w	r2, #4
 800187e:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001880:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001882:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001884:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001888:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800188a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800188c:	d068      	beq.n	8001960 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800188e:	f7ff ffd5 	bl	800183c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001892:	2300      	movs	r3, #0
 8001894:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001896:	6823      	ldr	r3, [r4, #0]
 8001898:	691a      	ldr	r2, [r3, #16]
 800189a:	0712      	lsls	r2, r2, #28
 800189c:	d50f      	bpl.n	80018be <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	0710      	lsls	r0, r2, #28
 80018a2:	d50c      	bpl.n	80018be <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018a4:	f06f 0208 	mvn.w	r2, #8
 80018a8:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018aa:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018ac:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018ae:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018b0:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80018b2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018b4:	d05a      	beq.n	800196c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80018b6:	f7ff ffc1 	bl	800183c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ba:	2300      	movs	r3, #0
 80018bc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018be:	6823      	ldr	r3, [r4, #0]
 80018c0:	691a      	ldr	r2, [r3, #16]
 80018c2:	06d2      	lsls	r2, r2, #27
 80018c4:	d510      	bpl.n	80018e8 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	06d0      	lsls	r0, r2, #27
 80018ca:	d50d      	bpl.n	80018e8 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018cc:	f06f 0210 	mvn.w	r2, #16
 80018d0:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018d2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018d4:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018d6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018da:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80018dc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018de:	d04b      	beq.n	8001978 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80018e0:	f7ff ffac 	bl	800183c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018e4:	2300      	movs	r3, #0
 80018e6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018e8:	6823      	ldr	r3, [r4, #0]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	07d1      	lsls	r1, r2, #31
 80018ee:	d508      	bpl.n	8001902 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	07d2      	lsls	r2, r2, #31
 80018f4:	d505      	bpl.n	8001902 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018f6:	f06f 0201 	mvn.w	r2, #1
 80018fa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80018fc:	4620      	mov	r0, r4
 80018fe:	f000 fe8b 	bl	8002618 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001902:	6823      	ldr	r3, [r4, #0]
 8001904:	691a      	ldr	r2, [r3, #16]
 8001906:	0610      	lsls	r0, r2, #24
 8001908:	d508      	bpl.n	800191c <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	0611      	lsls	r1, r2, #24
 800190e:	d505      	bpl.n	800191c <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001910:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001914:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001916:	4620      	mov	r0, r4
 8001918:	f000 fae9 	bl	8001eee <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800191c:	6823      	ldr	r3, [r4, #0]
 800191e:	691a      	ldr	r2, [r3, #16]
 8001920:	0652      	lsls	r2, r2, #25
 8001922:	d508      	bpl.n	8001936 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	0650      	lsls	r0, r2, #25
 8001928:	d505      	bpl.n	8001936 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800192a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800192e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001930:	4620      	mov	r0, r4
 8001932:	f7ff ff85 	bl	8001840 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001936:	6823      	ldr	r3, [r4, #0]
 8001938:	691a      	ldr	r2, [r3, #16]
 800193a:	0691      	lsls	r1, r2, #26
 800193c:	d522      	bpl.n	8001984 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	0692      	lsls	r2, r2, #26
 8001942:	d51f      	bpl.n	8001984 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001944:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8001948:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800194a:	611a      	str	r2, [r3, #16]
}
 800194c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001950:	f000 bacc 	b.w	8001eec <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001954:	f7ff ff71 	bl	800183a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001958:	4620      	mov	r0, r4
 800195a:	f7ff ff70 	bl	800183e <HAL_TIM_PWM_PulseFinishedCallback>
 800195e:	e783      	b.n	8001868 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001960:	f7ff ff6b 	bl	800183a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001964:	4620      	mov	r0, r4
 8001966:	f7ff ff6a 	bl	800183e <HAL_TIM_PWM_PulseFinishedCallback>
 800196a:	e792      	b.n	8001892 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800196c:	f7ff ff65 	bl	800183a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001970:	4620      	mov	r0, r4
 8001972:	f7ff ff64 	bl	800183e <HAL_TIM_PWM_PulseFinishedCallback>
 8001976:	e7a0      	b.n	80018ba <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001978:	f7ff ff5f 	bl	800183a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800197c:	4620      	mov	r0, r4
 800197e:	f7ff ff5e 	bl	800183e <HAL_TIM_PWM_PulseFinishedCallback>
 8001982:	e7af      	b.n	80018e4 <HAL_TIM_IRQHandler+0xa2>
 8001984:	bd10      	pop	{r4, pc}
	...

08001988 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001988:	4a30      	ldr	r2, [pc, #192]	; (8001a4c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800198a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800198c:	4290      	cmp	r0, r2
 800198e:	d012      	beq.n	80019b6 <TIM_Base_SetConfig+0x2e>
 8001990:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001994:	d00f      	beq.n	80019b6 <TIM_Base_SetConfig+0x2e>
 8001996:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800199a:	4290      	cmp	r0, r2
 800199c:	d00b      	beq.n	80019b6 <TIM_Base_SetConfig+0x2e>
 800199e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019a2:	4290      	cmp	r0, r2
 80019a4:	d007      	beq.n	80019b6 <TIM_Base_SetConfig+0x2e>
 80019a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019aa:	4290      	cmp	r0, r2
 80019ac:	d003      	beq.n	80019b6 <TIM_Base_SetConfig+0x2e>
 80019ae:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80019b2:	4290      	cmp	r0, r2
 80019b4:	d119      	bne.n	80019ea <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 80019b6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80019bc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019be:	4a23      	ldr	r2, [pc, #140]	; (8001a4c <TIM_Base_SetConfig+0xc4>)
 80019c0:	4290      	cmp	r0, r2
 80019c2:	d029      	beq.n	8001a18 <TIM_Base_SetConfig+0x90>
 80019c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80019c8:	d026      	beq.n	8001a18 <TIM_Base_SetConfig+0x90>
 80019ca:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80019ce:	4290      	cmp	r0, r2
 80019d0:	d022      	beq.n	8001a18 <TIM_Base_SetConfig+0x90>
 80019d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019d6:	4290      	cmp	r0, r2
 80019d8:	d01e      	beq.n	8001a18 <TIM_Base_SetConfig+0x90>
 80019da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019de:	4290      	cmp	r0, r2
 80019e0:	d01a      	beq.n	8001a18 <TIM_Base_SetConfig+0x90>
 80019e2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80019e6:	4290      	cmp	r0, r2
 80019e8:	d016      	beq.n	8001a18 <TIM_Base_SetConfig+0x90>
 80019ea:	4a19      	ldr	r2, [pc, #100]	; (8001a50 <TIM_Base_SetConfig+0xc8>)
 80019ec:	4290      	cmp	r0, r2
 80019ee:	d013      	beq.n	8001a18 <TIM_Base_SetConfig+0x90>
 80019f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019f4:	4290      	cmp	r0, r2
 80019f6:	d00f      	beq.n	8001a18 <TIM_Base_SetConfig+0x90>
 80019f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019fc:	4290      	cmp	r0, r2
 80019fe:	d00b      	beq.n	8001a18 <TIM_Base_SetConfig+0x90>
 8001a00:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001a04:	4290      	cmp	r0, r2
 8001a06:	d007      	beq.n	8001a18 <TIM_Base_SetConfig+0x90>
 8001a08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a0c:	4290      	cmp	r0, r2
 8001a0e:	d003      	beq.n	8001a18 <TIM_Base_SetConfig+0x90>
 8001a10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a14:	4290      	cmp	r0, r2
 8001a16:	d103      	bne.n	8001a20 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a18:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a1e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a20:	694a      	ldr	r2, [r1, #20]
 8001a22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a26:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001a28:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a2a:	688b      	ldr	r3, [r1, #8]
 8001a2c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001a2e:	680b      	ldr	r3, [r1, #0]
 8001a30:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <TIM_Base_SetConfig+0xc4>)
 8001a34:	4298      	cmp	r0, r3
 8001a36:	d003      	beq.n	8001a40 <TIM_Base_SetConfig+0xb8>
 8001a38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a3c:	4298      	cmp	r0, r3
 8001a3e:	d101      	bne.n	8001a44 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8001a40:	690b      	ldr	r3, [r1, #16]
 8001a42:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001a44:	2301      	movs	r3, #1
 8001a46:	6143      	str	r3, [r0, #20]
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40010000 	.word	0x40010000
 8001a50:	40014000 	.word	0x40014000

08001a54 <HAL_TIM_Base_Init>:
{
 8001a54:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001a56:	4604      	mov	r4, r0
 8001a58:	b1a0      	cbz	r0, 8001a84 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001a5a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a62:	b91b      	cbnz	r3, 8001a6c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001a64:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001a68:	f001 fb0c 	bl	8003084 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a72:	6820      	ldr	r0, [r4, #0]
 8001a74:	1d21      	adds	r1, r4, #4
 8001a76:	f7ff ff87 	bl	8001988 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001a80:	2000      	movs	r0, #0
 8001a82:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a84:	2001      	movs	r0, #1
}
 8001a86:	bd10      	pop	{r4, pc}

08001a88 <HAL_TIM_PWM_Init>:
{
 8001a88:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001a8a:	4604      	mov	r4, r0
 8001a8c:	b1a0      	cbz	r0, 8001ab8 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001a8e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a96:	b91b      	cbnz	r3, 8001aa0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001a98:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001a9c:	f7ff feaa 	bl	80017f4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aa6:	6820      	ldr	r0, [r4, #0]
 8001aa8:	1d21      	adds	r1, r4, #4
 8001aaa:	f7ff ff6d 	bl	8001988 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ab8:	2001      	movs	r0, #1
}
 8001aba:	bd10      	pop	{r4, pc}

08001abc <HAL_TIM_Encoder_Init>:
{
 8001abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001abe:	460c      	mov	r4, r1
  if (htim == NULL)
 8001ac0:	4605      	mov	r5, r0
 8001ac2:	2800      	cmp	r0, #0
 8001ac4:	d043      	beq.n	8001b4e <HAL_TIM_Encoder_Init+0x92>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001ac6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001aca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ace:	b91b      	cbnz	r3, 8001ad8 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8001ad0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8001ad4:	f001 fb00 	bl	80030d8 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001ad8:	4629      	mov	r1, r5
  htim->State = HAL_TIM_STATE_BUSY;
 8001ada:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001adc:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001ae4:	6883      	ldr	r3, [r0, #8]
 8001ae6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001aea:	f023 0307 	bic.w	r3, r3, #7
 8001aee:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001af0:	f7ff ff4a 	bl	8001988 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8001af4:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8001af6:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001af8:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8001afa:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001afc:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 8001afe:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8001b00:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001b02:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001b04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001b08:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001b0c:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8001b10:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001b12:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001b16:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001b18:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001b20:	68e1      	ldr	r1, [r4, #12]
 8001b22:	430b      	orrs	r3, r1
 8001b24:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001b26:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001b2a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8001b2e:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001b30:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001b32:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001b36:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8001b38:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001b3a:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8001b3e:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001b40:	4317      	orrs	r7, r2
  htim->State = HAL_TIM_STATE_READY;
 8001b42:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8001b44:	6207      	str	r7, [r0, #32]
  htim->State = HAL_TIM_STATE_READY;
 8001b46:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001b4e:	2001      	movs	r0, #1
}
 8001b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001b54 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b54:	6a03      	ldr	r3, [r0, #32]
 8001b56:	f023 0310 	bic.w	r3, r3, #16
 8001b5a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001b5c:	6a03      	ldr	r3, [r0, #32]
{
 8001b5e:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8001b60:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001b62:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b64:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001b66:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b6a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b6e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001b70:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b74:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001b78:	4d10      	ldr	r5, [pc, #64]	; (8001bbc <TIM_OC2_SetConfig+0x68>)
 8001b7a:	42a8      	cmp	r0, r5
 8001b7c:	d003      	beq.n	8001b86 <TIM_OC2_SetConfig+0x32>
 8001b7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b82:	42a8      	cmp	r0, r5
 8001b84:	d114      	bne.n	8001bb0 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b86:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001b88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b8c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b90:	4d0a      	ldr	r5, [pc, #40]	; (8001bbc <TIM_OC2_SetConfig+0x68>)
 8001b92:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8001b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b98:	d003      	beq.n	8001ba2 <TIM_OC2_SetConfig+0x4e>
 8001b9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b9e:	42a8      	cmp	r0, r5
 8001ba0:	d106      	bne.n	8001bb0 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001ba2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001ba4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001ba6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001baa:	4335      	orrs	r5, r6
 8001bac:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001bb0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001bb2:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001bb4:	684a      	ldr	r2, [r1, #4]
 8001bb6:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001bb8:	6203      	str	r3, [r0, #32]
 8001bba:	bd70      	pop	{r4, r5, r6, pc}
 8001bbc:	40010000 	.word	0x40010000

08001bc0 <HAL_TIM_PWM_ConfigChannel>:
{
 8001bc0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001bc2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001bc6:	2b01      	cmp	r3, #1
{
 8001bc8:	4604      	mov	r4, r0
 8001bca:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001bce:	d025      	beq.n	8001c1c <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8001bda:	2a0c      	cmp	r2, #12
 8001bdc:	d818      	bhi.n	8001c10 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001bde:	e8df f002 	tbb	[pc, r2]
 8001be2:	1707      	.short	0x1707
 8001be4:	171e1717 	.word	0x171e1717
 8001be8:	172f1717 	.word	0x172f1717
 8001bec:	1717      	.short	0x1717
 8001bee:	40          	.byte	0x40
 8001bef:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001bf0:	6820      	ldr	r0, [r4, #0]
 8001bf2:	f7ff fd61 	bl	80016b8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bf6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001bf8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bfa:	699a      	ldr	r2, [r3, #24]
 8001bfc:	f042 0208 	orr.w	r2, r2, #8
 8001c00:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c02:	699a      	ldr	r2, [r3, #24]
 8001c04:	f022 0204 	bic.w	r2, r2, #4
 8001c08:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c0a:	699a      	ldr	r2, [r3, #24]
 8001c0c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c0e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001c10:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001c12:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001c14:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001c18:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001c1c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c1e:	6820      	ldr	r0, [r4, #0]
 8001c20:	f7ff ff98 	bl	8001b54 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c24:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c26:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c28:	699a      	ldr	r2, [r3, #24]
 8001c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c30:	699a      	ldr	r2, [r3, #24]
 8001c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c38:	699a      	ldr	r2, [r3, #24]
 8001c3a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001c3e:	e7e6      	b.n	8001c0e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c40:	6820      	ldr	r0, [r4, #0]
 8001c42:	f7ff fd6b 	bl	800171c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c46:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c48:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c4a:	69da      	ldr	r2, [r3, #28]
 8001c4c:	f042 0208 	orr.w	r2, r2, #8
 8001c50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c52:	69da      	ldr	r2, [r3, #28]
 8001c54:	f022 0204 	bic.w	r2, r2, #4
 8001c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c5a:	69da      	ldr	r2, [r3, #28]
 8001c5c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c5e:	61da      	str	r2, [r3, #28]
      break;
 8001c60:	e7d6      	b.n	8001c10 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c62:	6820      	ldr	r0, [r4, #0]
 8001c64:	f7ff fd90 	bl	8001788 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c68:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c6a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c6c:	69da      	ldr	r2, [r3, #28]
 8001c6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c72:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c74:	69da      	ldr	r2, [r3, #28]
 8001c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c7a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c7c:	69da      	ldr	r2, [r3, #28]
 8001c7e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001c82:	e7ec      	b.n	8001c5e <HAL_TIM_PWM_ConfigChannel+0x9e>

08001c84 <TIM_ETR_SetConfig>:
{
 8001c84:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 8001c86:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c88:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c8a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c8e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001c92:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8001c94:	6083      	str	r3, [r0, #8]
 8001c96:	bd10      	pop	{r4, pc}

08001c98 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001c98:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001c9c:	2b01      	cmp	r3, #1
{
 8001c9e:	b570      	push	{r4, r5, r6, lr}
 8001ca0:	4604      	mov	r4, r0
 8001ca2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001ca6:	d019      	beq.n	8001cdc <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001cac:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001cae:	2301      	movs	r3, #1
 8001cb0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001cb4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001cba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001cbe:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001cc0:	680b      	ldr	r3, [r1, #0]
 8001cc2:	2b40      	cmp	r3, #64	; 0x40
 8001cc4:	d065      	beq.n	8001d92 <HAL_TIM_ConfigClockSource+0xfa>
 8001cc6:	d815      	bhi.n	8001cf4 <HAL_TIM_ConfigClockSource+0x5c>
 8001cc8:	2b10      	cmp	r3, #16
 8001cca:	d00c      	beq.n	8001ce6 <HAL_TIM_ConfigClockSource+0x4e>
 8001ccc:	d807      	bhi.n	8001cde <HAL_TIM_ConfigClockSource+0x46>
 8001cce:	b153      	cbz	r3, 8001ce6 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8001cd0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001cd2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001cd4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001cd8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001cdc:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001cde:	2b20      	cmp	r3, #32
 8001ce0:	d001      	beq.n	8001ce6 <HAL_TIM_ConfigClockSource+0x4e>
 8001ce2:	2b30      	cmp	r3, #48	; 0x30
 8001ce4:	d1f4      	bne.n	8001cd0 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8001ce6:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ce8:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	e01a      	b.n	8001d2a <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8001cf4:	2b60      	cmp	r3, #96	; 0x60
 8001cf6:	d034      	beq.n	8001d62 <HAL_TIM_ConfigClockSource+0xca>
 8001cf8:	d819      	bhi.n	8001d2e <HAL_TIM_ConfigClockSource+0x96>
 8001cfa:	2b50      	cmp	r3, #80	; 0x50
 8001cfc:	d1e8      	bne.n	8001cd0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cfe:	684a      	ldr	r2, [r1, #4]
 8001d00:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001d02:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d04:	6a05      	ldr	r5, [r0, #32]
 8001d06:	f025 0501 	bic.w	r5, r5, #1
 8001d0a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d0c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d0e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d16:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001d1a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001d1c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001d1e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001d20:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d26:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001d2a:	6083      	str	r3, [r0, #8]
 8001d2c:	e7d0      	b.n	8001cd0 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8001d2e:	2b70      	cmp	r3, #112	; 0x70
 8001d30:	d00c      	beq.n	8001d4c <HAL_TIM_ConfigClockSource+0xb4>
 8001d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d36:	d1cb      	bne.n	8001cd0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8001d38:	68cb      	ldr	r3, [r1, #12]
 8001d3a:	684a      	ldr	r2, [r1, #4]
 8001d3c:	6889      	ldr	r1, [r1, #8]
 8001d3e:	f7ff ffa1 	bl	8001c84 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d42:	6822      	ldr	r2, [r4, #0]
 8001d44:	6893      	ldr	r3, [r2, #8]
 8001d46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d4a:	e008      	b.n	8001d5e <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8001d4c:	68cb      	ldr	r3, [r1, #12]
 8001d4e:	684a      	ldr	r2, [r1, #4]
 8001d50:	6889      	ldr	r1, [r1, #8]
 8001d52:	f7ff ff97 	bl	8001c84 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001d56:	6822      	ldr	r2, [r4, #0]
 8001d58:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d5a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d5e:	6093      	str	r3, [r2, #8]
      break;
 8001d60:	e7b6      	b.n	8001cd0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d62:	684d      	ldr	r5, [r1, #4]
 8001d64:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d66:	6a01      	ldr	r1, [r0, #32]
 8001d68:	f021 0110 	bic.w	r1, r1, #16
 8001d6c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d6e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001d70:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d72:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d7a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d7e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001d82:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001d84:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001d86:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d8c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001d90:	e7cb      	b.n	8001d2a <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d92:	684a      	ldr	r2, [r1, #4]
 8001d94:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001d96:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d98:	6a05      	ldr	r5, [r0, #32]
 8001d9a:	f025 0501 	bic.w	r5, r5, #1
 8001d9e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001da0:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001da2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001da6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001daa:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001dae:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001db0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001db2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001db4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001dba:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001dbe:	e7b4      	b.n	8001d2a <HAL_TIM_ConfigClockSource+0x92>

08001dc0 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8001dc0:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001dc2:	f001 011f 	and.w	r1, r1, #31
{
 8001dc6:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001dc8:	2401      	movs	r4, #1
 8001dca:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001dcc:	ea23 0304 	bic.w	r3, r3, r4
 8001dd0:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001dd2:	6a03      	ldr	r3, [r0, #32]
 8001dd4:	408a      	lsls	r2, r1
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	6202      	str	r2, [r0, #32]
 8001dda:	bd10      	pop	{r4, pc}

08001ddc <HAL_TIM_PWM_Start>:
{
 8001ddc:	b510      	push	{r4, lr}
 8001dde:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001de0:	2201      	movs	r2, #1
 8001de2:	6800      	ldr	r0, [r0, #0]
 8001de4:	f7ff ffec 	bl	8001dc0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001de8:	6823      	ldr	r3, [r4, #0]
 8001dea:	4a0b      	ldr	r2, [pc, #44]	; (8001e18 <HAL_TIM_PWM_Start+0x3c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d00e      	beq.n	8001e0e <HAL_TIM_PWM_Start+0x32>
 8001df0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d00a      	beq.n	8001e0e <HAL_TIM_PWM_Start+0x32>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dfe:	2a06      	cmp	r2, #6
 8001e00:	d003      	beq.n	8001e0a <HAL_TIM_PWM_Start+0x2e>
    __HAL_TIM_ENABLE(htim);
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	f042 0201 	orr.w	r2, r2, #1
 8001e08:	601a      	str	r2, [r3, #0]
}
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8001e0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e14:	645a      	str	r2, [r3, #68]	; 0x44
 8001e16:	e7ef      	b.n	8001df8 <HAL_TIM_PWM_Start+0x1c>
 8001e18:	40010000 	.word	0x40010000

08001e1c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e1c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001e20:	2b01      	cmp	r3, #1
{
 8001e22:	b530      	push	{r4, r5, lr}
 8001e24:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001e28:	d035      	beq.n	8001e96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e2a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e2e:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e30:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8001e32:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e34:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8001e38:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e3a:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8001e3c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001e40:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e42:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e44:	4c15      	ldr	r4, [pc, #84]	; (8001e9c <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8001e46:	42a3      	cmp	r3, r4
 8001e48:	d01a      	beq.n	8001e80 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e4e:	d017      	beq.n	8001e80 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001e50:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8001e54:	42a3      	cmp	r3, r4
 8001e56:	d013      	beq.n	8001e80 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001e58:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e5c:	42a3      	cmp	r3, r4
 8001e5e:	d00f      	beq.n	8001e80 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001e60:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e64:	42a3      	cmp	r3, r4
 8001e66:	d00b      	beq.n	8001e80 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001e68:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8001e6c:	42a3      	cmp	r3, r4
 8001e6e:	d007      	beq.n	8001e80 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001e70:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8001e74:	42a3      	cmp	r3, r4
 8001e76:	d003      	beq.n	8001e80 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001e78:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8001e7c:	42a3      	cmp	r3, r4
 8001e7e:	d104      	bne.n	8001e8a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e80:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e86:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e90:	2300      	movs	r3, #0
 8001e92:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001e96:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001e98:	bd30      	pop	{r4, r5, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40010000 	.word	0x40010000

08001ea0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ea0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d01f      	beq.n	8001ee8 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001ea8:	68cb      	ldr	r3, [r1, #12]
 8001eaa:	688a      	ldr	r2, [r1, #8]
 8001eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eb0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001eb2:	684a      	ldr	r2, [r1, #4]
 8001eb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001eb8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001eba:	680a      	ldr	r2, [r1, #0]
 8001ebc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ec0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001ec2:	690a      	ldr	r2, [r1, #16]
 8001ec4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ec8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001eca:	694a      	ldr	r2, [r1, #20]
 8001ecc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ed0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001ed2:	69ca      	ldr	r2, [r1, #28]
 8001ed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ed8:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001eda:	6802      	ldr	r2, [r0, #0]
 8001edc:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001ee8:	2002      	movs	r0, #2
}
 8001eea:	4770      	bx	lr

08001eec <HAL_TIMEx_CommutCallback>:
 8001eec:	4770      	bx	lr

08001eee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001eee:	4770      	bx	lr

08001ef0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ef0:	6803      	ldr	r3, [r0, #0]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001ef8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001efa:	695a      	ldr	r2, [r3, #20]
 8001efc:	f022 0201 	bic.w	r2, r2, #1
 8001f00:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f02:	2320      	movs	r3, #32
 8001f04:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001f08:	4770      	bx	lr
	...

08001f0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f0c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f0e:	6803      	ldr	r3, [r0, #0]
 8001f10:	68c1      	ldr	r1, [r0, #12]
 8001f12:	691a      	ldr	r2, [r3, #16]
{
 8001f14:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f16:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f1e:	6925      	ldr	r5, [r4, #16]
 8001f20:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f22:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f24:	69c0      	ldr	r0, [r0, #28]
 8001f26:	432a      	orrs	r2, r5
 8001f28:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001f2a:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f2e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8001f30:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f34:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001f36:	430a      	orrs	r2, r1
 8001f38:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f3a:	695a      	ldr	r2, [r3, #20]
 8001f3c:	69a1      	ldr	r1, [r4, #24]
 8001f3e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001f42:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f44:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f48:	615a      	str	r2, [r3, #20]
 8001f4a:	4a25      	ldr	r2, [pc, #148]	; (8001fe0 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f4c:	d129      	bne.n	8001fa2 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d003      	beq.n	8001f5a <UART_SetConfig+0x4e>
 8001f52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d120      	bne.n	8001f9c <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f5a:	f7ff fb9d 	bl	8001698 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f5e:	6862      	ldr	r2, [r4, #4]
 8001f60:	6825      	ldr	r5, [r4, #0]
 8001f62:	1892      	adds	r2, r2, r2
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	f04f 0119 	mov.w	r1, #25
 8001f6c:	415b      	adcs	r3, r3
 8001f6e:	fba0 0101 	umull	r0, r1, r0, r1
 8001f72:	f7fe fdc3 	bl	8000afc <__aeabi_uldivmod>
 8001f76:	2164      	movs	r1, #100	; 0x64
 8001f78:	fbb0 f4f1 	udiv	r4, r0, r1
 8001f7c:	fb01 0314 	mls	r3, r1, r4, r0
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	3332      	adds	r3, #50	; 0x32
 8001f84:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f88:	f003 0207 	and.w	r2, r3, #7
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8001f92:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f96:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f98:	60ab      	str	r3, [r5, #8]
 8001f9a:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f9c:	f7ff fb6c 	bl	8001678 <HAL_RCC_GetPCLK1Freq>
 8001fa0:	e7dd      	b.n	8001f5e <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d002      	beq.n	8001fac <UART_SetConfig+0xa0>
 8001fa6:	4a0f      	ldr	r2, [pc, #60]	; (8001fe4 <UART_SetConfig+0xd8>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d116      	bne.n	8001fda <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001fac:	f7ff fb74 	bl	8001698 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fb0:	6863      	ldr	r3, [r4, #4]
 8001fb2:	6825      	ldr	r5, [r4, #0]
 8001fb4:	2119      	movs	r1, #25
 8001fb6:	009a      	lsls	r2, r3, #2
 8001fb8:	fba0 0101 	umull	r0, r1, r0, r1
 8001fbc:	0f9b      	lsrs	r3, r3, #30
 8001fbe:	f7fe fd9d 	bl	8000afc <__aeabi_uldivmod>
 8001fc2:	2264      	movs	r2, #100	; 0x64
 8001fc4:	fbb0 f1f2 	udiv	r1, r0, r2
 8001fc8:	fb02 0311 	mls	r3, r2, r1, r0
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	3332      	adds	r3, #50	; 0x32
 8001fd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fd4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001fd8:	e7de      	b.n	8001f98 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001fda:	f7ff fb4d 	bl	8001678 <HAL_RCC_GetPCLK1Freq>
 8001fde:	e7e7      	b.n	8001fb0 <UART_SetConfig+0xa4>
 8001fe0:	40011000 	.word	0x40011000
 8001fe4:	40011400 	.word	0x40011400

08001fe8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fea:	4604      	mov	r4, r0
 8001fec:	460e      	mov	r6, r1
 8001fee:	4617      	mov	r7, r2
 8001ff0:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ff2:	6821      	ldr	r1, [r4, #0]
 8001ff4:	680b      	ldr	r3, [r1, #0]
 8001ff6:	ea36 0303 	bics.w	r3, r6, r3
 8001ffa:	d101      	bne.n	8002000 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001ffc:	2000      	movs	r0, #0
}
 8001ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002000:	1c6b      	adds	r3, r5, #1
 8002002:	d0f7      	beq.n	8001ff4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002004:	b995      	cbnz	r5, 800202c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002006:	6823      	ldr	r3, [r4, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800200e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002010:	695a      	ldr	r2, [r3, #20]
 8002012:	f022 0201 	bic.w	r2, r2, #1
 8002016:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002018:	2320      	movs	r3, #32
 800201a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800201e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002022:	2300      	movs	r3, #0
 8002024:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002028:	2003      	movs	r0, #3
 800202a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800202c:	f7fe ff38 	bl	8000ea0 <HAL_GetTick>
 8002030:	1bc0      	subs	r0, r0, r7
 8002032:	4285      	cmp	r5, r0
 8002034:	d2dd      	bcs.n	8001ff2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002036:	e7e6      	b.n	8002006 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002038 <HAL_UART_Init>:
{
 8002038:	b510      	push	{r4, lr}
  if (huart == NULL)
 800203a:	4604      	mov	r4, r0
 800203c:	b340      	cbz	r0, 8002090 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800203e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002042:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002046:	b91b      	cbnz	r3, 8002050 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002048:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800204c:	f001 f9da 	bl	8003404 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002050:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002052:	2324      	movs	r3, #36	; 0x24
 8002054:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002058:	68d3      	ldr	r3, [r2, #12]
 800205a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800205e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002060:	4620      	mov	r0, r4
 8002062:	f7ff ff53 	bl	8001f0c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002066:	6823      	ldr	r3, [r4, #0]
 8002068:	691a      	ldr	r2, [r3, #16]
 800206a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800206e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002070:	695a      	ldr	r2, [r3, #20]
 8002072:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002076:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800207e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002080:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002082:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002084:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002086:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800208a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800208e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002090:	2001      	movs	r0, #1
}
 8002092:	bd10      	pop	{r4, pc}

08002094 <HAL_UART_Transmit>:
{
 8002094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002098:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800209a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800209e:	2b20      	cmp	r3, #32
{
 80020a0:	4604      	mov	r4, r0
 80020a2:	460d      	mov	r5, r1
 80020a4:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80020a6:	d151      	bne.n	800214c <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 80020a8:	2900      	cmp	r1, #0
 80020aa:	d04c      	beq.n	8002146 <HAL_UART_Transmit+0xb2>
 80020ac:	2a00      	cmp	r2, #0
 80020ae:	d04a      	beq.n	8002146 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 80020b0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d049      	beq.n	800214c <HAL_UART_Transmit+0xb8>
 80020b8:	2301      	movs	r3, #1
 80020ba:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020be:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020c2:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c4:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020c8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80020cc:	f7fe fee8 	bl	8000ea0 <HAL_GetTick>
    huart->TxXferSize = Size;
 80020d0:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80020d4:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80020d6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80020da:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 80020de:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	b95b      	cbnz	r3, 80020fc <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020e4:	463b      	mov	r3, r7
 80020e6:	4632      	mov	r2, r6
 80020e8:	2140      	movs	r1, #64	; 0x40
 80020ea:	4620      	mov	r0, r4
 80020ec:	f7ff ff7c 	bl	8001fe8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80020f0:	b9a0      	cbnz	r0, 800211c <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 80020f2:	2320      	movs	r3, #32
 80020f4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80020f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 80020fc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29b      	uxth	r3, r3
 8002102:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002104:	68a3      	ldr	r3, [r4, #8]
 8002106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800210a:	4632      	mov	r2, r6
 800210c:	463b      	mov	r3, r7
 800210e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002112:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002114:	d10e      	bne.n	8002134 <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002116:	f7ff ff67 	bl	8001fe8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800211a:	b110      	cbz	r0, 8002122 <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 800211c:	2003      	movs	r0, #3
 800211e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002122:	882b      	ldrh	r3, [r5, #0]
 8002124:	6822      	ldr	r2, [r4, #0]
 8002126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800212a:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800212c:	6923      	ldr	r3, [r4, #16]
 800212e:	b943      	cbnz	r3, 8002142 <HAL_UART_Transmit+0xae>
          pData += 2U;
 8002130:	3502      	adds	r5, #2
 8002132:	e7d4      	b.n	80020de <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002134:	f7ff ff58 	bl	8001fe8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002138:	2800      	cmp	r0, #0
 800213a:	d1ef      	bne.n	800211c <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800213c:	6823      	ldr	r3, [r4, #0]
 800213e:	782a      	ldrb	r2, [r5, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	3501      	adds	r5, #1
 8002144:	e7cb      	b.n	80020de <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 8002146:	2001      	movs	r0, #1
 8002148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800214c:	2002      	movs	r0, #2
}
 800214e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002152 <HAL_UART_Receive>:
{
 8002152:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002156:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002158:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800215c:	2b20      	cmp	r3, #32
{
 800215e:	4604      	mov	r4, r0
 8002160:	460d      	mov	r5, r1
 8002162:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002164:	d154      	bne.n	8002210 <HAL_UART_Receive+0xbe>
    if ((pData == NULL) || (Size == 0U))
 8002166:	2900      	cmp	r1, #0
 8002168:	d04f      	beq.n	800220a <HAL_UART_Receive+0xb8>
 800216a:	2a00      	cmp	r2, #0
 800216c:	d04d      	beq.n	800220a <HAL_UART_Receive+0xb8>
    __HAL_LOCK(huart);
 800216e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002172:	2b01      	cmp	r3, #1
 8002174:	d04c      	beq.n	8002210 <HAL_UART_Receive+0xbe>
 8002176:	2301      	movs	r3, #1
 8002178:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800217c:	f04f 0900 	mov.w	r9, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002180:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002182:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002186:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 800218a:	f7fe fe89 	bl	8000ea0 <HAL_GetTick>
    huart->RxXferSize = Size;
 800218e:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 8002192:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 8002194:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    __HAL_UNLOCK(huart);
 8002198:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->RxXferCount > 0U)
 800219c:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 800219e:	b280      	uxth	r0, r0
 80021a0:	b920      	cbnz	r0, 80021ac <HAL_UART_Receive+0x5a>
    huart->RxState = HAL_UART_STATE_READY;
 80021a2:	2320      	movs	r3, #32
 80021a4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 80021a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->RxXferCount--;
 80021ac:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80021ae:	3b01      	subs	r3, #1
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021b4:	68a3      	ldr	r3, [r4, #8]
 80021b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80021ba:	4632      	mov	r2, r6
 80021bc:	463b      	mov	r3, r7
 80021be:	f04f 0120 	mov.w	r1, #32
 80021c2:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021c4:	d112      	bne.n	80021ec <HAL_UART_Receive+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80021c6:	f7ff ff0f 	bl	8001fe8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80021ca:	b110      	cbz	r0, 80021d2 <HAL_UART_Receive+0x80>
          return HAL_TIMEOUT;
 80021cc:	2003      	movs	r0, #3
 80021ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021d2:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80021d4:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80021d6:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80021d8:	b922      	cbnz	r2, 80021e4 <HAL_UART_Receive+0x92>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80021da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021de:	f825 3b02 	strh.w	r3, [r5], #2
 80021e2:	e7db      	b.n	800219c <HAL_UART_Receive+0x4a>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	f825 3b01 	strh.w	r3, [r5], #1
 80021ea:	e7d7      	b.n	800219c <HAL_UART_Receive+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80021ec:	f7ff fefc 	bl	8001fe8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80021f0:	2800      	cmp	r0, #0
 80021f2:	d1eb      	bne.n	80021cc <HAL_UART_Receive+0x7a>
 80021f4:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80021f6:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	1c6a      	adds	r2, r5, #1
        if (huart->Init.Parity == UART_PARITY_NONE)
 80021fc:	b911      	cbnz	r1, 8002204 <HAL_UART_Receive+0xb2>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021fe:	702b      	strb	r3, [r5, #0]
 8002200:	4615      	mov	r5, r2
 8002202:	e7cb      	b.n	800219c <HAL_UART_Receive+0x4a>
 8002204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002208:	e7f9      	b.n	80021fe <HAL_UART_Receive+0xac>
      return  HAL_ERROR;
 800220a:	2001      	movs	r0, #1
 800220c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8002210:	2002      	movs	r0, #2
}
 8002212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002216 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002216:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800221a:	2b20      	cmp	r3, #32
 800221c:	d120      	bne.n	8002260 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 800221e:	b1e9      	cbz	r1, 800225c <HAL_UART_Receive_IT+0x46>
 8002220:	b1e2      	cbz	r2, 800225c <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8002222:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002226:	2b01      	cmp	r3, #1
 8002228:	d01a      	beq.n	8002260 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 800222a:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 800222c:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800222e:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002230:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002232:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002234:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002238:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 800223a:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800223c:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 800223e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002242:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002246:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002248:	6951      	ldr	r1, [r2, #20]
 800224a:	f041 0101 	orr.w	r1, r1, #1
 800224e:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002250:	68d1      	ldr	r1, [r2, #12]
 8002252:	f041 0120 	orr.w	r1, r1, #32
 8002256:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8002258:	4618      	mov	r0, r3
 800225a:	4770      	bx	lr
      return HAL_ERROR;
 800225c:	2001      	movs	r0, #1
 800225e:	4770      	bx	lr
    return HAL_BUSY;
 8002260:	2002      	movs	r0, #2
}
 8002262:	4770      	bx	lr

08002264 <HAL_UART_TxCpltCallback>:
 8002264:	4770      	bx	lr

08002266 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002266:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800226a:	2b22      	cmp	r3, #34	; 0x22
{
 800226c:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800226e:	d136      	bne.n	80022de <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002270:	6883      	ldr	r3, [r0, #8]
 8002272:	6901      	ldr	r1, [r0, #16]
 8002274:	6802      	ldr	r2, [r0, #0]
 8002276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800227a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800227c:	d123      	bne.n	80022c6 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800227e:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002280:	b9e9      	cbnz	r1, 80022be <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002282:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002286:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800228a:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800228c:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800228e:	3c01      	subs	r4, #1
 8002290:	b2a4      	uxth	r4, r4
 8002292:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002294:	b98c      	cbnz	r4, 80022ba <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002296:	6803      	ldr	r3, [r0, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	f022 0220 	bic.w	r2, r2, #32
 800229e:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022a6:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80022a8:	695a      	ldr	r2, [r3, #20]
 80022aa:	f022 0201 	bic.w	r2, r2, #1
 80022ae:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80022b0:	2320      	movs	r3, #32
 80022b2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80022b6:	f000 fdb3 	bl	8002e20 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 80022ba:	2000      	movs	r0, #0
}
 80022bc:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	f823 2b01 	strh.w	r2, [r3], #1
 80022c4:	e7e1      	b.n	800228a <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80022c6:	b921      	cbnz	r1, 80022d2 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80022c8:	1c59      	adds	r1, r3, #1
 80022ca:	6852      	ldr	r2, [r2, #4]
 80022cc:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80022ce:	701a      	strb	r2, [r3, #0]
 80022d0:	e7dc      	b.n	800228c <UART_Receive_IT+0x26>
 80022d2:	6852      	ldr	r2, [r2, #4]
 80022d4:	1c59      	adds	r1, r3, #1
 80022d6:	6281      	str	r1, [r0, #40]	; 0x28
 80022d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022dc:	e7f7      	b.n	80022ce <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80022de:	2002      	movs	r0, #2
 80022e0:	bd10      	pop	{r4, pc}

080022e2 <HAL_UART_ErrorCallback>:
 80022e2:	4770      	bx	lr

080022e4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022e4:	6803      	ldr	r3, [r0, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022e8:	68d9      	ldr	r1, [r3, #12]
{
 80022ea:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80022ec:	0716      	lsls	r6, r2, #28
{
 80022ee:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022f0:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80022f2:	d107      	bne.n	8002304 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022f4:	0696      	lsls	r6, r2, #26
 80022f6:	d55c      	bpl.n	80023b2 <HAL_UART_IRQHandler+0xce>
 80022f8:	068d      	lsls	r5, r1, #26
 80022fa:	d55a      	bpl.n	80023b2 <HAL_UART_IRQHandler+0xce>
}
 80022fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002300:	f7ff bfb1 	b.w	8002266 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002304:	f015 0501 	ands.w	r5, r5, #1
 8002308:	d102      	bne.n	8002310 <HAL_UART_IRQHandler+0x2c>
 800230a:	f411 7f90 	tst.w	r1, #288	; 0x120
 800230e:	d050      	beq.n	80023b2 <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002310:	07d0      	lsls	r0, r2, #31
 8002312:	d505      	bpl.n	8002320 <HAL_UART_IRQHandler+0x3c>
 8002314:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002316:	bf42      	ittt	mi
 8002318:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800231a:	f043 0301 	orrmi.w	r3, r3, #1
 800231e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002320:	0756      	lsls	r6, r2, #29
 8002322:	d504      	bpl.n	800232e <HAL_UART_IRQHandler+0x4a>
 8002324:	b11d      	cbz	r5, 800232e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002326:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002328:	f043 0302 	orr.w	r3, r3, #2
 800232c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800232e:	0790      	lsls	r0, r2, #30
 8002330:	d504      	bpl.n	800233c <HAL_UART_IRQHandler+0x58>
 8002332:	b11d      	cbz	r5, 800233c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002334:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002336:	f043 0304 	orr.w	r3, r3, #4
 800233a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800233c:	0713      	lsls	r3, r2, #28
 800233e:	d506      	bpl.n	800234e <HAL_UART_IRQHandler+0x6a>
 8002340:	068e      	lsls	r6, r1, #26
 8002342:	d400      	bmi.n	8002346 <HAL_UART_IRQHandler+0x62>
 8002344:	b11d      	cbz	r5, 800234e <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002346:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002348:	f043 0308 	orr.w	r3, r3, #8
 800234c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800234e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002350:	2b00      	cmp	r3, #0
 8002352:	d066      	beq.n	8002422 <HAL_UART_IRQHandler+0x13e>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002354:	0695      	lsls	r5, r2, #26
 8002356:	d504      	bpl.n	8002362 <HAL_UART_IRQHandler+0x7e>
 8002358:	0688      	lsls	r0, r1, #26
 800235a:	d502      	bpl.n	8002362 <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 800235c:	4620      	mov	r0, r4
 800235e:	f7ff ff82 	bl	8002266 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002362:	6823      	ldr	r3, [r4, #0]
 8002364:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002366:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002368:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 800236a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800236c:	d402      	bmi.n	8002374 <HAL_UART_IRQHandler+0x90>
 800236e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002372:	d01a      	beq.n	80023aa <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 8002374:	f7ff fdbc 	bl	8001ef0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002378:	6823      	ldr	r3, [r4, #0]
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	0652      	lsls	r2, r2, #25
 800237e:	d510      	bpl.n	80023a2 <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002380:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002382:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002388:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800238a:	b150      	cbz	r0, 80023a2 <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <HAL_UART_IRQHandler+0x140>)
 800238e:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002390:	f7fe fe0a 	bl	8000fa8 <HAL_DMA_Abort_IT>
 8002394:	2800      	cmp	r0, #0
 8002396:	d044      	beq.n	8002422 <HAL_UART_IRQHandler+0x13e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002398:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800239a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800239e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80023a0:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80023a2:	4620      	mov	r0, r4
 80023a4:	f7ff ff9d 	bl	80022e2 <HAL_UART_ErrorCallback>
 80023a8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80023aa:	f7ff ff9a 	bl	80022e2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ae:	63e5      	str	r5, [r4, #60]	; 0x3c
 80023b0:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80023b2:	0616      	lsls	r6, r2, #24
 80023b4:	d527      	bpl.n	8002406 <HAL_UART_IRQHandler+0x122>
 80023b6:	060d      	lsls	r5, r1, #24
 80023b8:	d525      	bpl.n	8002406 <HAL_UART_IRQHandler+0x122>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80023ba:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80023be:	2a21      	cmp	r2, #33	; 0x21
 80023c0:	d12f      	bne.n	8002422 <HAL_UART_IRQHandler+0x13e>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80023c2:	68a2      	ldr	r2, [r4, #8]
 80023c4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80023c8:	6a22      	ldr	r2, [r4, #32]
 80023ca:	d117      	bne.n	80023fc <HAL_UART_IRQHandler+0x118>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80023cc:	8811      	ldrh	r1, [r2, #0]
 80023ce:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80023d2:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80023d4:	6921      	ldr	r1, [r4, #16]
 80023d6:	b979      	cbnz	r1, 80023f8 <HAL_UART_IRQHandler+0x114>
        huart->pTxBuffPtr += 2U;
 80023d8:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80023da:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80023dc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80023de:	3a01      	subs	r2, #1
 80023e0:	b292      	uxth	r2, r2
 80023e2:	84e2      	strh	r2, [r4, #38]	; 0x26
 80023e4:	b9ea      	cbnz	r2, 8002422 <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023ec:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80023f8:	3201      	adds	r2, #1
 80023fa:	e7ee      	b.n	80023da <HAL_UART_IRQHandler+0xf6>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80023fc:	1c51      	adds	r1, r2, #1
 80023fe:	6221      	str	r1, [r4, #32]
 8002400:	7812      	ldrb	r2, [r2, #0]
 8002402:	605a      	str	r2, [r3, #4]
 8002404:	e7ea      	b.n	80023dc <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002406:	0650      	lsls	r0, r2, #25
 8002408:	d50b      	bpl.n	8002422 <HAL_UART_IRQHandler+0x13e>
 800240a:	064a      	lsls	r2, r1, #25
 800240c:	d509      	bpl.n	8002422 <HAL_UART_IRQHandler+0x13e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800240e:	68da      	ldr	r2, [r3, #12]
 8002410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002414:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002416:	2320      	movs	r3, #32
 8002418:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800241c:	4620      	mov	r0, r4
 800241e:	f7ff ff21 	bl	8002264 <HAL_UART_TxCpltCallback>
 8002422:	bd70      	pop	{r4, r5, r6, pc}
 8002424:	08002429 	.word	0x08002429

08002428 <UART_DMAAbortOnError>:
{
 8002428:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800242a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 800242c:	2300      	movs	r3, #0
 800242e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002430:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002432:	f7ff ff56 	bl	80022e2 <HAL_UART_ErrorCallback>
 8002436:	bd08      	pop	{r3, pc}

08002438 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800243c:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243e:	2214      	movs	r2, #20
 8002440:	2100      	movs	r1, #0
 8002442:	a807      	add	r0, sp, #28
 8002444:	f001 f892 	bl	800356c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002448:	2400      	movs	r4, #0
 800244a:	4b51      	ldr	r3, [pc, #324]	; (8002590 <MX_GPIO_Init+0x158>)
 800244c:	9401      	str	r4, [sp, #4]
 800244e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002450:	4e50      	ldr	r6, [pc, #320]	; (8002594 <MX_GPIO_Init+0x15c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002452:	f8df 914c 	ldr.w	r9, [pc, #332]	; 80025a0 <MX_GPIO_Init+0x168>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002456:	f8df 814c 	ldr.w	r8, [pc, #332]	; 80025a4 <MX_GPIO_Init+0x16c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800245a:	4f4f      	ldr	r7, [pc, #316]	; (8002598 <MX_GPIO_Init+0x160>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800245c:	f042 0210 	orr.w	r2, r2, #16
 8002460:	631a      	str	r2, [r3, #48]	; 0x30
 8002462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002464:	f002 0210 	and.w	r2, r2, #16
 8002468:	9201      	str	r2, [sp, #4]
 800246a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800246c:	9402      	str	r4, [sp, #8]
 800246e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002470:	f042 0204 	orr.w	r2, r2, #4
 8002474:	631a      	str	r2, [r3, #48]	; 0x30
 8002476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002478:	f002 0204 	and.w	r2, r2, #4
 800247c:	9202      	str	r2, [sp, #8]
 800247e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002480:	9403      	str	r4, [sp, #12]
 8002482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002484:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002488:	631a      	str	r2, [r3, #48]	; 0x30
 800248a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800248c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002490:	9203      	str	r2, [sp, #12]
 8002492:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002494:	9404      	str	r4, [sp, #16]
 8002496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002498:	f042 0201 	orr.w	r2, r2, #1
 800249c:	631a      	str	r2, [r3, #48]	; 0x30
 800249e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024a0:	f002 0201 	and.w	r2, r2, #1
 80024a4:	9204      	str	r2, [sp, #16]
 80024a6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a8:	9405      	str	r4, [sp, #20]
 80024aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ac:	f042 0202 	orr.w	r2, r2, #2
 80024b0:	631a      	str	r2, [r3, #48]	; 0x30
 80024b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024b4:	f002 0202 	and.w	r2, r2, #2
 80024b8:	9205      	str	r2, [sp, #20]
 80024ba:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024bc:	9406      	str	r4, [sp, #24]
 80024be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024c0:	f042 0208 	orr.w	r2, r2, #8
 80024c4:	631a      	str	r2, [r3, #48]	; 0x30
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80024ce:	4622      	mov	r2, r4
 80024d0:	4630      	mov	r0, r6
 80024d2:	2138      	movs	r1, #56	; 0x38
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024d4:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80024d6:	f7fe fe59 	bl	800118c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80024da:	4622      	mov	r2, r4
 80024dc:	4648      	mov	r0, r9
 80024de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024e2:	f7fe fe53 	bl	800118c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80024e6:	2201      	movs	r2, #1
 80024e8:	4611      	mov	r1, r2
 80024ea:	4648      	mov	r0, r9
 80024ec:	f7fe fe4e 	bl	800118c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80024f0:	4622      	mov	r2, r4
 80024f2:	4640      	mov	r0, r8
 80024f4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80024f8:	f7fe fe48 	bl	800118c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80024fc:	4622      	mov	r2, r4
 80024fe:	4638      	mov	r0, r7
 8002500:	f44f 6171 	mov.w	r1, #3856	; 0xf10
 8002504:	f7fe fe42 	bl	800118c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PE4 PE5 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002508:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5;
 800250a:	2338      	movs	r3, #56	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800250c:	a907      	add	r1, sp, #28
 800250e:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5;
 8002510:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002512:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002516:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002518:	f7fe fd58 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|OTG_FS_PowerSwitchOn_Pin;
 800251c:	f242 0301 	movw	r3, #8193	; 0x2001
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002520:	a907      	add	r1, sp, #28
 8002522:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_13|OTG_FS_PowerSwitchOn_Pin;
 8002524:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002526:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800252c:	f7fe fd4e 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002530:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002532:	a907      	add	r1, sp, #28
 8002534:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002536:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002538:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800253c:	f7fe fd46 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002540:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002544:	a907      	add	r1, sp, #28
 8002546:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002548:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800254a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002550:	f7fe fd3c 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8002554:	f44f 6371 	mov.w	r3, #3856	; 0xf10
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002558:	a907      	add	r1, sp, #28
 800255a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800255c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800255e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002562:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002564:	f7fe fd32 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002568:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800256a:	a907      	add	r1, sp, #28
 800256c:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800256e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002570:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002574:	f7fe fd2a 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002578:	2302      	movs	r3, #2
 800257a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800257c:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800257e:	4b07      	ldr	r3, [pc, #28]	; (800259c <MX_GPIO_Init+0x164>)
 8002580:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002582:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002586:	f7fe fd21 	bl	8000fcc <HAL_GPIO_Init>

}
 800258a:	b00d      	add	sp, #52	; 0x34
 800258c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002590:	40023800 	.word	0x40023800
 8002594:	40021000 	.word	0x40021000
 8002598:	40020c00 	.word	0x40020c00
 800259c:	10120000 	.word	0x10120000
 80025a0:	40020800 	.word	0x40020800
 80025a4:	40020400 	.word	0x40020400

080025a8 <array_element_of_index_equal>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool array_element_of_index_equal(uint8_t a[], uint8_t b[], uint8_t size) {
 80025a8:	b510      	push	{r4, lr}
 80025aa:	3a01      	subs	r2, #1
 80025ac:	1e43      	subs	r3, r0, #1
 80025ae:	3901      	subs	r1, #1
 80025b0:	4410      	add	r0, r2
   uint8_t i;
   for(i=0; i<size; i++){
 80025b2:	4283      	cmp	r3, r0
 80025b4:	d101      	bne.n	80025ba <array_element_of_index_equal+0x12>
      if( a[i] != b[i] )
         return false;
   }
   return true;
 80025b6:	2001      	movs	r0, #1
 80025b8:	bd10      	pop	{r4, pc}
      if( a[i] != b[i] )
 80025ba:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 80025be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80025c2:	4294      	cmp	r4, r2
 80025c4:	d0f5      	beq.n	80025b2 <array_element_of_index_equal+0xa>
         return false;
 80025c6:	2000      	movs	r0, #0
}
 80025c8:	bd10      	pop	{r4, pc}

080025ca <array_avg_compare>:
int16_t array_avg_compare(uint16_t distance[]){

   uint32_t sum_R = 0;
   uint32_t sum_L = 0;
   uint8_t len_L = 0;
   uint8_t len_R = 0;
 80025ca:	2200      	movs	r2, #0
int16_t array_avg_compare(uint16_t distance[]){
 80025cc:	b530      	push	{r4, r5, lr}
 80025ce:	1e81      	subs	r1, r0, #2
 80025d0:	f100 05b2 	add.w	r5, r0, #178	; 0xb2
   uint32_t sum_R = 0;
 80025d4:	4613      	mov	r3, r2
   uint16_t avg_R = 0;
   uint16_t avg_L = 0;
   int16_t avg_diff = 0;

   for(int i=0; i<90; i++){
      sum_R += distance[i];
 80025d6:	f831 4f02 	ldrh.w	r4, [r1, #2]!
 80025da:	4423      	add	r3, r4
      if(distance[i]!=0){
 80025dc:	b10c      	cbz	r4, 80025e2 <array_avg_compare+0x18>
         len_R++;
 80025de:	3201      	adds	r2, #1
 80025e0:	b2d2      	uxtb	r2, r2
   for(int i=0; i<90; i++){
 80025e2:	428d      	cmp	r5, r1
 80025e4:	d1f7      	bne.n	80025d6 <array_avg_compare+0xc>
      }
   }
   avg_R = sum_R/len_R;
 80025e6:	fbb3 f3f2 	udiv	r3, r3, r2
   uint8_t len_L = 0;
 80025ea:	2200      	movs	r2, #0
 80025ec:	f200 241a 	addw	r4, r0, #538	; 0x21a
   avg_R = sum_R/len_R;
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	f200 20ce 	addw	r0, r0, #718	; 0x2ce
   uint32_t sum_L = 0;
 80025f6:	4611      	mov	r1, r2

   for(int i=270; i<360; i++){
      sum_L += distance[i];
 80025f8:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 80025fc:	4429      	add	r1, r5
      if(distance[i]!=0){
 80025fe:	b10d      	cbz	r5, 8002604 <array_avg_compare+0x3a>
         len_L++;
 8002600:	3201      	adds	r2, #1
 8002602:	b2d2      	uxtb	r2, r2
   for(int i=270; i<360; i++){
 8002604:	42a0      	cmp	r0, r4
 8002606:	d1f7      	bne.n	80025f8 <array_avg_compare+0x2e>
      }
   }
   avg_L = sum_L/len_L;
 8002608:	fbb1 f0f2 	udiv	r0, r1, r2

   avg_diff = avg_R - avg_L;
 800260c:	1a18      	subs	r0, r3, r0

   return avg_diff;
}
 800260e:	b200      	sxth	r0, r0
 8002610:	bd30      	pop	{r4, r5, pc}
 8002612:	0000      	movs	r0, r0
 8002614:	0000      	movs	r0, r0
	...

08002618 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)	//Timer interrupt every 20ms
{
 8002618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(htim->Instance == TIM6){
 800261a:	6802      	ldr	r2, [r0, #0]
 800261c:	4b50      	ldr	r3, [pc, #320]	; (8002760 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800261e:	429a      	cmp	r2, r3
 8002620:	f040 8094 	bne.w	800274c <HAL_TIM_PeriodElapsedCallback+0x134>

		//HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
		encoder_cnt[0] = TIM2->CNT;
 8002624:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002628:	4d4e      	ldr	r5, [pc, #312]	; (8002764 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800262a:	6a50      	ldr	r0, [r2, #36]	; 0x24
 800262c:	6028      	str	r0, [r5, #0]
		TIM2->CNT=0;
 800262e:	2300      	movs	r3, #0
 8002630:	6253      	str	r3, [r2, #36]	; 0x24

		encoder_cnt[1] = TIM3->CNT;
 8002632:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
 8002636:	6069      	str	r1, [r5, #4]
		TIM3->CNT=0;
 8002638:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424

		encoder_cnt[2] = TIM4->CNT;
 800263c:	f8d2 1824 	ldr.w	r1, [r2, #2084]	; 0x824
 8002640:	60a9      	str	r1, [r5, #8]
		TIM4->CNT=0;
 8002642:	f8c2 3824 	str.w	r3, [r2, #2084]	; 0x824

		encoder_cnt[3] = TIM5->CNT;
 8002646:	f8d2 1c24 	ldr.w	r1, [r2, #3108]	; 0xc24
 800264a:	60e9      	str	r1, [r5, #12]
		TIM5->CNT=0;
 800264c:	f8c2 3c24 	str.w	r3, [r2, #3108]	; 0xc24

		encoder_speed[0] = 164.18 * exp(0.0112*encoder_cnt[0]);
 8002650:	f7fd fefc 	bl	800044c <__aeabi_ui2d>
 8002654:	a33e      	add	r3, pc, #248	; (adr r3, 8002750 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265a:	f7fd ff6d 	bl	8000538 <__aeabi_dmul>
 800265e:	ec41 0b10 	vmov	d0, r0, r1
 8002662:	f000 ff8d 	bl	8003580 <exp>
 8002666:	a33c      	add	r3, pc, #240	; (adr r3, 8002758 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	ec51 0b10 	vmov	r0, r1, d0
 8002670:	f7fd ff62 	bl	8000538 <__aeabi_dmul>
 8002674:	f7fe fa22 	bl	8000abc <__aeabi_d2uiz>
 8002678:	4c3b      	ldr	r4, [pc, #236]	; (8002768 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800267a:	6020      	str	r0, [r4, #0]
		encoder_speed[1] = 164.18 * exp(0.0112*encoder_cnt[1]);
 800267c:	6868      	ldr	r0, [r5, #4]
 800267e:	f7fd fee5 	bl	800044c <__aeabi_ui2d>
 8002682:	a333      	add	r3, pc, #204	; (adr r3, 8002750 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002688:	f7fd ff56 	bl	8000538 <__aeabi_dmul>
 800268c:	ec41 0b10 	vmov	d0, r0, r1
 8002690:	f000 ff76 	bl	8003580 <exp>
 8002694:	a330      	add	r3, pc, #192	; (adr r3, 8002758 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269a:	ec51 0b10 	vmov	r0, r1, d0
 800269e:	f7fd ff4b 	bl	8000538 <__aeabi_dmul>
 80026a2:	f7fe fa0b 	bl	8000abc <__aeabi_d2uiz>
 80026a6:	6060      	str	r0, [r4, #4]
		encoder_speed[2] = 164.18 * exp(0.0112*encoder_cnt[2]);
 80026a8:	68a8      	ldr	r0, [r5, #8]
 80026aa:	f7fd fecf 	bl	800044c <__aeabi_ui2d>
 80026ae:	a328      	add	r3, pc, #160	; (adr r3, 8002750 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80026b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b4:	f7fd ff40 	bl	8000538 <__aeabi_dmul>
 80026b8:	ec41 0b10 	vmov	d0, r0, r1
 80026bc:	f000 ff60 	bl	8003580 <exp>
 80026c0:	a325      	add	r3, pc, #148	; (adr r3, 8002758 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80026c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c6:	ec51 0b10 	vmov	r0, r1, d0
 80026ca:	f7fd ff35 	bl	8000538 <__aeabi_dmul>
 80026ce:	f7fe f9f5 	bl	8000abc <__aeabi_d2uiz>
 80026d2:	60a0      	str	r0, [r4, #8]
		encoder_speed[3] = 164.18 * exp(0.0112*encoder_cnt[3]);
 80026d4:	68e8      	ldr	r0, [r5, #12]
 80026d6:	f7fd feb9 	bl	800044c <__aeabi_ui2d>
 80026da:	a31d      	add	r3, pc, #116	; (adr r3, 8002750 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80026dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e0:	f7fd ff2a 	bl	8000538 <__aeabi_dmul>
 80026e4:	ec41 0b10 	vmov	d0, r0, r1
 80026e8:	f000 ff4a 	bl	8003580 <exp>
 80026ec:	a31a      	add	r3, pc, #104	; (adr r3, 8002758 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80026ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f2:	ec51 0b10 	vmov	r0, r1, d0
 80026f6:	f7fd ff1f 	bl	8000538 <__aeabi_dmul>
 80026fa:	f7fe f9df 	bl	8000abc <__aeabi_d2uiz>

		error_speed[0] = desired_speed - encoder_speed[0];
 80026fe:	4b1b      	ldr	r3, [pc, #108]	; (800276c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002700:	6822      	ldr	r2, [r4, #0]
 8002702:	681e      	ldr	r6, [r3, #0]
		error_speed[1] = desired_speed - encoder_speed[1];
 8002704:	6865      	ldr	r5, [r4, #4]
		error_speed[2] = desired_speed - encoder_speed[2];
 8002706:	68a1      	ldr	r1, [r4, #8]
		error_speed[0] = desired_speed - encoder_speed[0];
 8002708:	4b19      	ldr	r3, [pc, #100]	; (8002770 <HAL_TIM_PeriodElapsedCallback+0x158>)
		encoder_speed[3] = 164.18 * exp(0.0112*encoder_cnt[3]);
 800270a:	60e0      	str	r0, [r4, #12]
		error_speed[1] = desired_speed - encoder_speed[1];
 800270c:	1b75      	subs	r5, r6, r5
		error_speed[0] = desired_speed - encoder_speed[0];
 800270e:	1ab2      	subs	r2, r6, r2
		error_speed[2] = desired_speed - encoder_speed[2];
 8002710:	1a71      	subs	r1, r6, r1
		error_speed[3] = desired_speed - encoder_speed[3];
 8002712:	1a30      	subs	r0, r6, r0
		error_speed[0] = desired_speed - encoder_speed[0];
 8002714:	601a      	str	r2, [r3, #0]
		error_speed[1] = desired_speed - encoder_speed[1];
 8002716:	605d      	str	r5, [r3, #4]
		error_speed[2] = desired_speed - encoder_speed[2];
 8002718:	6099      	str	r1, [r3, #8]
		error_speed[3] = desired_speed - encoder_speed[3];
 800271a:	60d8      	str	r0, [r3, #12]

		PID_speed[0] = old_PID_speed[0] + Kp*error_speed[0];
 800271c:	4b15      	ldr	r3, [pc, #84]	; (8002774 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800271e:	4e16      	ldr	r6, [pc, #88]	; (8002778 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002720:	681f      	ldr	r7, [r3, #0]
 8002722:	4b16      	ldr	r3, [pc, #88]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002724:	681c      	ldr	r4, [r3, #0]
 8002726:	fb07 4202 	mla	r2, r7, r2, r4
		PID_speed[1] = old_PID_speed[1] + Kp*error_speed[1];
 800272a:	685c      	ldr	r4, [r3, #4]
		PID_speed[0] = old_PID_speed[0] + Kp*error_speed[0];
 800272c:	6032      	str	r2, [r6, #0]
		PID_speed[1] = old_PID_speed[1] + Kp*error_speed[1];
 800272e:	fb07 4405 	mla	r4, r7, r5, r4
		PID_speed[2] = old_PID_speed[2] + Kp*error_speed[2];
 8002732:	689d      	ldr	r5, [r3, #8]
		PID_speed[1] = old_PID_speed[1] + Kp*error_speed[1];
 8002734:	6074      	str	r4, [r6, #4]
		PID_speed[2] = old_PID_speed[2] + Kp*error_speed[2];
 8002736:	fb07 5101 	mla	r1, r7, r1, r5
		PID_speed[3] = old_PID_speed[3] + Kp*error_speed[3];
 800273a:	68dd      	ldr	r5, [r3, #12]
		PID_speed[2] = old_PID_speed[2] + Kp*error_speed[2];
 800273c:	60b1      	str	r1, [r6, #8]

		old_PID_speed[0] = PID_speed[0];
		old_PID_speed[1] = PID_speed[1];
 800273e:	e883 0014 	stmia.w	r3, {r2, r4}
		PID_speed[3] = old_PID_speed[3] + Kp*error_speed[3];
 8002742:	fb07 5000 	mla	r0, r7, r0, r5
 8002746:	60f0      	str	r0, [r6, #12]
		old_PID_speed[2] = PID_speed[2];
 8002748:	6099      	str	r1, [r3, #8]
		old_PID_speed[3] = PID_speed[3];
 800274a:	60d8      	str	r0, [r3, #12]
 800274c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800274e:	bf00      	nop
 8002750:	8db8bac7 	.word	0x8db8bac7
 8002754:	3f86f006 	.word	0x3f86f006
 8002758:	8f5c28f6 	.word	0x8f5c28f6
 800275c:	406485c2 	.word	0x406485c2
 8002760:	40001000 	.word	0x40001000
 8002764:	200003b0 	.word	0x200003b0
 8002768:	200003c0 	.word	0x200003c0
 800276c:	2000000c 	.word	0x2000000c
 8002770:	200003d0 	.word	0x200003d0
 8002774:	20000008 	.word	0x20000008
 8002778:	200000cc 	.word	0x200000cc
 800277c:	20000010 	.word	0x20000010

08002780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002780:	b530      	push	{r4, r5, lr}
 8002782:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002784:	2230      	movs	r2, #48	; 0x30
 8002786:	2100      	movs	r1, #0
 8002788:	a808      	add	r0, sp, #32
 800278a:	f000 feef 	bl	800356c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800278e:	2100      	movs	r1, #0
 8002790:	2214      	movs	r2, #20
 8002792:	a803      	add	r0, sp, #12
 8002794:	f000 feea 	bl	800356c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002798:	2400      	movs	r4, #0
 800279a:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <SystemClock_Config+0x90>)
 800279c:	9401      	str	r4, [sp, #4]
 800279e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027a4:	641a      	str	r2, [r3, #64]	; 0x40
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027b0:	4b18      	ldr	r3, [pc, #96]	; (8002814 <SystemClock_Config+0x94>)
 80027b2:	9402      	str	r4, [sp, #8]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c2:	9302      	str	r3, [sp, #8]
 80027c4:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027c6:	2301      	movs	r3, #1
 80027c8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027ce:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027d4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80027d6:	2304      	movs	r3, #4
 80027d8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80027da:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027dc:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 80027de:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027e0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80027e2:	2307      	movs	r3, #7
 80027e4:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027e6:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027e8:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027ea:	f7fe fcd5 	bl	8001198 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027ee:	230f      	movs	r3, #15
 80027f0:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027f6:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80027f8:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80027fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80027fe:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002800:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002802:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002804:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002806:	f7fe fe9b 	bl	8001540 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800280a:	b015      	add	sp, #84	; 0x54
 800280c:	bd30      	pop	{r4, r5, pc}
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800
 8002814:	40007000 	.word	0x40007000

08002818 <main>:
int main(void){
 8002818:	b580      	push	{r7, lr}
  HAL_Init();
 800281a:	f7fe fb1b 	bl	8000e54 <HAL_Init>
  SystemClock_Config();
 800281e:	f7ff ffaf 	bl	8002780 <SystemClock_Config>
  MX_GPIO_Init();
 8002822:	f7ff fe09 	bl	8002438 <MX_GPIO_Init>
  MX_TIM1_Init();
 8002826:	f000 fd33 	bl	8003290 <MX_TIM1_Init>
  MX_TIM2_Init();
 800282a:	f000 fb4f 	bl	8002ecc <MX_TIM2_Init>
  MX_TIM3_Init();
 800282e:	f000 fb7b 	bl	8002f28 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002832:	f000 fba7 	bl	8002f84 <MX_TIM4_Init>
  MX_TIM6_Init();
 8002836:	f000 fc01 	bl	800303c <MX_TIM6_Init>
  MX_USART2_UART_Init();
 800283a:	f000 fdab 	bl	8003394 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800283e:	f000 fdc5 	bl	80033cc <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8002842:	f000 fbcd 	bl	8002fe0 <MX_TIM5_Init>
  * @retval None
  */
static void MX_NVIC_Init(void)
{
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002846:	2200      	movs	r2, #0
 8002848:	4611      	mov	r1, r2
 800284a:	2026      	movs	r0, #38	; 0x26
 800284c:	f7fe fb54 	bl	8000ef8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002850:	2026      	movs	r0, #38	; 0x26
 8002852:	f7fe fb85 	bl	8000f60 <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002856:	2200      	movs	r2, #0
 8002858:	4611      	mov	r1, r2
 800285a:	2036      	movs	r0, #54	; 0x36
 800285c:	f7fe fb4c 	bl	8000ef8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002860:	2036      	movs	r0, #54	; 0x36
 8002862:	f7fe fb7d 	bl	8000f60 <HAL_NVIC_EnableIRQ>
  HAL_Delay(3000);
 8002866:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800286a:	f7fe fb1f 	bl	8000eac <HAL_Delay>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800286e:	2100      	movs	r1, #0
 8002870:	48b1      	ldr	r0, [pc, #708]	; (8002b38 <main+0x320>)
			 TIM1->CCR1 = 0;
 8002872:	4cb2      	ldr	r4, [pc, #712]	; (8002b3c <main+0x324>)
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002874:	f7ff fab2 	bl	8001ddc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002878:	2104      	movs	r1, #4
 800287a:	48af      	ldr	r0, [pc, #700]	; (8002b38 <main+0x320>)
 800287c:	f7ff faae 	bl	8001ddc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002880:	2108      	movs	r1, #8
 8002882:	48ad      	ldr	r0, [pc, #692]	; (8002b38 <main+0x320>)
 8002884:	f7ff faaa 	bl	8001ddc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002888:	210c      	movs	r1, #12
 800288a:	48ab      	ldr	r0, [pc, #684]	; (8002b38 <main+0x320>)
 800288c:	f7ff faa6 	bl	8001ddc <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 8002890:	2201      	movs	r2, #1
 8002892:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002896:	48aa      	ldr	r0, [pc, #680]	; (8002b40 <main+0x328>)
 8002898:	f7fe fc78 	bl	800118c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 800289c:	2200      	movs	r2, #0
 800289e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028a2:	48a7      	ldr	r0, [pc, #668]	; (8002b40 <main+0x328>)
 80028a4:	f7fe fc72 	bl	800118c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 80028a8:	2201      	movs	r2, #1
 80028aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028ae:	48a4      	ldr	r0, [pc, #656]	; (8002b40 <main+0x328>)
 80028b0:	f7fe fc6c 	bl	800118c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 80028b4:	2200      	movs	r2, #0
 80028b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ba:	48a1      	ldr	r0, [pc, #644]	; (8002b40 <main+0x328>)
 80028bc:	f7fe fc66 	bl	800118c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, SET);
 80028c0:	2201      	movs	r2, #1
 80028c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028c6:	489f      	ldr	r0, [pc, #636]	; (8002b44 <main+0x32c>)
 80028c8:	f7fe fc60 	bl	800118c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 80028cc:	2200      	movs	r2, #0
 80028ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028d2:	489c      	ldr	r0, [pc, #624]	; (8002b44 <main+0x32c>)
 80028d4:	f7fe fc5a 	bl	800118c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, SET);
 80028d8:	2201      	movs	r2, #1
 80028da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028de:	4899      	ldr	r0, [pc, #612]	; (8002b44 <main+0x32c>)
 80028e0:	f7fe fc54 	bl	800118c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);
 80028e4:	2200      	movs	r2, #0
 80028e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028ea:	4896      	ldr	r0, [pc, #600]	; (8002b44 <main+0x32c>)
 80028ec:	f7fe fc4e 	bl	800118c <HAL_GPIO_WritePin>
  TIM2->CNT = 0;
 80028f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028f4:	2300      	movs	r3, #0
 80028f6:	6253      	str	r3, [r2, #36]	; 0x24
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80028f8:	213c      	movs	r1, #60	; 0x3c
  TIM3->CNT = 0;
 80028fa:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80028fe:	4892      	ldr	r0, [pc, #584]	; (8002b48 <main+0x330>)
  TIM4->CNT = 0;
 8002900:	f8c2 3824 	str.w	r3, [r2, #2084]	; 0x824
  TIM5->CNT = 0;
 8002904:	f8c2 3c24 	str.w	r3, [r2, #3108]	; 0xc24
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002908:	f7fe ff75 	bl	80017f6 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800290c:	213c      	movs	r1, #60	; 0x3c
 800290e:	488f      	ldr	r0, [pc, #572]	; (8002b4c <main+0x334>)
 8002910:	f7fe ff71 	bl	80017f6 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8002914:	213c      	movs	r1, #60	; 0x3c
 8002916:	488e      	ldr	r0, [pc, #568]	; (8002b50 <main+0x338>)
 8002918:	f7fe ff6d 	bl	80017f6 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 800291c:	213c      	movs	r1, #60	; 0x3c
 800291e:	488d      	ldr	r0, [pc, #564]	; (8002b54 <main+0x33c>)
 8002920:	f7fe ff69 	bl	80017f6 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8002924:	488c      	ldr	r0, [pc, #560]	; (8002b58 <main+0x340>)
 8002926:	f7fe ff55 	bl	80017d4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2,&rx2_data,1);
 800292a:	2201      	movs	r2, #1
 800292c:	498b      	ldr	r1, [pc, #556]	; (8002b5c <main+0x344>)
 800292e:	488c      	ldr	r0, [pc, #560]	; (8002b60 <main+0x348>)
 8002930:	f7ff fc71 	bl	8002216 <HAL_UART_Receive_IT>
	  if(MOTER_PWM[0]>10000){
 8002934:	f242 7710 	movw	r7, #10000	; 0x2710
 8002938:	46b8      	mov	r8, r7
	  if(scan_start){
 800293a:	4e8a      	ldr	r6, [pc, #552]	; (8002b64 <main+0x34c>)
 800293c:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8002ba4 <main+0x38c>
 8002940:	7833      	ldrb	r3, [r6, #0]
 8002942:	4d89      	ldr	r5, [pc, #548]	; (8002b68 <main+0x350>)
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80d3 	beq.w	8002af0 <main+0x2d8>
		  if(HAL_UART_Receive(&huart3, &rx3_data, 5, 10) == HAL_OK){
 800294a:	4e88      	ldr	r6, [pc, #544]	; (8002b6c <main+0x354>)
 800294c:	4888      	ldr	r0, [pc, #544]	; (8002b70 <main+0x358>)
 800294e:	230a      	movs	r3, #10
 8002950:	2205      	movs	r2, #5
 8002952:	4631      	mov	r1, r6
 8002954:	f7ff fbfd 	bl	8002152 <HAL_UART_Receive>
 8002958:	2800      	cmp	r0, #0
 800295a:	d133      	bne.n	80029c4 <main+0x1ac>
			 Q = rx3_data[0]>>2;
 800295c:	7833      	ldrb	r3, [r6, #0]
 800295e:	4a85      	ldr	r2, [pc, #532]	; (8002b74 <main+0x35c>)
 8002960:	0899      	lsrs	r1, r3, #2
 8002962:	7011      	strb	r1, [r2, #0]
			 S = (rx3_data[0] & 0x01) ? 1 : 0;
 8002964:	4a84      	ldr	r2, [pc, #528]	; (8002b78 <main+0x360>)
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	7013      	strb	r3, [r2, #0]
 800296c:	b2d9      	uxtb	r1, r3
			 angle = (rx3_data[2]<<7 | rx3_data[1]>>1)/64;
 800296e:	7873      	ldrb	r3, [r6, #1]
 8002970:	78b2      	ldrb	r2, [r6, #2]
 8002972:	085b      	lsrs	r3, r3, #1
 8002974:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8002978:	4a80      	ldr	r2, [pc, #512]	; (8002b7c <main+0x364>)
 800297a:	119b      	asrs	r3, r3, #6
 800297c:	8013      	strh	r3, [r2, #0]
			 d = (rx3_data[4]<<8 | rx3_data[3])/4;
 800297e:	f8b6 2003 	ldrh.w	r2, [r6, #3]
 8002982:	4e7f      	ldr	r6, [pc, #508]	; (8002b80 <main+0x368>)
 8002984:	1092      	asrs	r2, r2, #2
 8002986:	b290      	uxth	r0, r2
 8002988:	8030      	strh	r0, [r6, #0]
			 if(d >= 5000){
 800298a:	f241 3687 	movw	r6, #4999	; 0x1387
 800298e:	42b2      	cmp	r2, r6
 8002990:	4a7c      	ldr	r2, [pc, #496]	; (8002b84 <main+0x36c>)
				distance[angle] = 5000;
 8002992:	bfc8      	it	gt
 8002994:	f241 3088 	movwgt	r0, #5000	; 0x1388
				distance[angle] = d;
 8002998:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
			 if(S == 1){
 800299c:	b191      	cbz	r1, 80029c4 <main+0x1ac>
				avg_DIFF = array_avg_compare(distance);
 800299e:	4879      	ldr	r0, [pc, #484]	; (8002b84 <main+0x36c>)
 80029a0:	f7ff fe13 	bl	80025ca <array_avg_compare>
				MOTER_PWM[0] = PID_speed + avg_DIFF;
 80029a4:	0083      	lsls	r3, r0, #2
				avg_DIFF = array_avg_compare(distance);
 80029a6:	f8a9 0000 	strh.w	r0, [r9]
				MOTER_PWM[0] = PID_speed + avg_DIFF;
 80029aa:	4877      	ldr	r0, [pc, #476]	; (8002b88 <main+0x370>)
 80029ac:	18c2      	adds	r2, r0, r3
				MOTER_PWM[1] = PID_speed - avg_DIFF;
 80029ae:	1ac0      	subs	r0, r0, r3
				MOTER_PWM[0] = PID_speed + avg_DIFF;
 80029b0:	602a      	str	r2, [r5, #0]
				MOTER_PWM[1] = PID_speed - avg_DIFF;
 80029b2:	6068      	str	r0, [r5, #4]
				MOTER_PWM[2] = PID_speed + avg_DIFF;
 80029b4:	60aa      	str	r2, [r5, #8]
				MOTER_PWM[3] = PID_speed - avg_DIFF;
 80029b6:	60e8      	str	r0, [r5, #12]
				memset(distance, 0, 360);
 80029b8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80029bc:	2100      	movs	r1, #0
 80029be:	4871      	ldr	r0, [pc, #452]	; (8002b84 <main+0x36c>)
 80029c0:	f000 fdd4 	bl	800356c <memset>
	   if(avg_DIFF > 0){
 80029c4:	f9b9 6000 	ldrsh.w	r6, [r9]
 80029c8:	2e00      	cmp	r6, #0
 80029ca:	f340 80a5 	ble.w	8002b18 <main+0x300>
		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 80029ce:	2200      	movs	r2, #0
 80029d0:	2110      	movs	r1, #16
 80029d2:	486e      	ldr	r0, [pc, #440]	; (8002b8c <main+0x374>)
 80029d4:	f7fe fbda 	bl	800118c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_5,GPIO_PIN_SET);
 80029d8:	2201      	movs	r2, #1
	   if(rx2_data != 0){
 80029da:	f8df a180 	ldr.w	sl, [pc, #384]	; 8002b5c <main+0x344>
		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_5,GPIO_PIN_RESET);
 80029de:	486b      	ldr	r0, [pc, #428]	; (8002b8c <main+0x374>)
 80029e0:	2120      	movs	r1, #32
 80029e2:	f7fe fbd3 	bl	800118c <HAL_GPIO_WritePin>
	   if(rx2_data != 0){
 80029e6:	f89a 6000 	ldrb.w	r6, [sl]
 80029ea:	2e00      	cmp	r6, #0
 80029ec:	d065      	beq.n	8002aba <main+0x2a2>
		  if(rx2_data == 1){
 80029ee:	2e01      	cmp	r6, #1
 80029f0:	f040 80da 	bne.w	8002ba8 <main+0x390>
			  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13, GPIO_PIN_SET);
 80029f4:	4632      	mov	r2, r6
 80029f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029fa:	4865      	ldr	r0, [pc, #404]	; (8002b90 <main+0x378>)
 80029fc:	f7fe fbc6 	bl	800118c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, SET);
 8002a00:	4632      	mov	r2, r6
 8002a02:	2110      	movs	r1, #16
 8002a04:	4861      	ldr	r0, [pc, #388]	; (8002b8c <main+0x374>)
 8002a06:	f7fe fbc1 	bl	800118c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, RESET);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2120      	movs	r1, #32
 8002a0e:	485f      	ldr	r0, [pc, #380]	; (8002b8c <main+0x374>)
 8002a10:	f7fe fbbc 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8002a14:	2200      	movs	r2, #0
 8002a16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a1a:	4849      	ldr	r0, [pc, #292]	; (8002b40 <main+0x328>)
 8002a1c:	f7fe fbb6 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 8002a20:	4632      	mov	r2, r6
 8002a22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a26:	4846      	ldr	r0, [pc, #280]	; (8002b40 <main+0x328>)
 8002a28:	f7fe fbb0 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8002a2c:	4632      	mov	r2, r6
 8002a2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a32:	4843      	ldr	r0, [pc, #268]	; (8002b40 <main+0x328>)
 8002a34:	f7fe fbaa 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a3e:	4840      	ldr	r0, [pc, #256]	; (8002b40 <main+0x328>)
 8002a40:	f7fe fba4 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, SET);
 8002a44:	4632      	mov	r2, r6
 8002a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a4a:	483e      	ldr	r0, [pc, #248]	; (8002b44 <main+0x32c>)
 8002a4c:	f7fe fb9e 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 8002a50:	2200      	movs	r2, #0
 8002a52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a56:	483b      	ldr	r0, [pc, #236]	; (8002b44 <main+0x32c>)
 8002a58:	f7fe fb98 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, RESET);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a62:	4838      	ldr	r0, [pc, #224]	; (8002b44 <main+0x32c>)
 8002a64:	f7fe fb92 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, SET);
 8002a68:	4632      	mov	r2, r6
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);
 8002a6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a6e:	4835      	ldr	r0, [pc, #212]	; (8002b44 <main+0x32c>)
 8002a70:	f7fe fb8c 	bl	800118c <HAL_GPIO_WritePin>
			 TIM1->CCR1 = speed_LR;
 8002a74:	4b47      	ldr	r3, [pc, #284]	; (8002b94 <main+0x37c>)
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	6363      	str	r3, [r4, #52]	; 0x34
			 TIM1->CCR2 = speed_LR;
 8002a7a:	63a3      	str	r3, [r4, #56]	; 0x38
			 TIM1->CCR3 = speed;
 8002a7c:	4b46      	ldr	r3, [pc, #280]	; (8002b98 <main+0x380>)
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	63e3      	str	r3, [r4, #60]	; 0x3c
			 HAL_Delay(100);
 8002a82:	2064      	movs	r0, #100	; 0x64
			 TIM1->CCR4 = speed;
 8002a84:	6423      	str	r3, [r4, #64]	; 0x40
			 HAL_Delay(100);
 8002a86:	f7fe fa11 	bl	8000eac <HAL_Delay>
			 TIM1->CCR1 = 0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	6363      	str	r3, [r4, #52]	; 0x34
			 TIM1->CCR2 = 0;
 8002a8e:	63a3      	str	r3, [r4, #56]	; 0x38
			 TIM1->CCR3 = 0;
 8002a90:	63e3      	str	r3, [r4, #60]	; 0x3c
			 TIM1->CCR4 = 0;
 8002a92:	6423      	str	r3, [r4, #64]	; 0x40
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13, GPIO_PIN_RESET);
 8002a94:	2200      	movs	r2, #0
 8002a96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a9a:	483d      	ldr	r0, [pc, #244]	; (8002b90 <main+0x378>)
 8002a9c:	f7fe fb76 	bl	800118c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, RESET);
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2110      	movs	r1, #16
 8002aa4:	4839      	ldr	r0, [pc, #228]	; (8002b8c <main+0x374>)
 8002aa6:	f7fe fb71 	bl	800118c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, RESET);
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2120      	movs	r1, #32
 8002aae:	4837      	ldr	r0, [pc, #220]	; (8002b8c <main+0x374>)
 8002ab0:	f7fe fb6c 	bl	800118c <HAL_GPIO_WritePin>
		  rx2_data = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f88a 3000 	strb.w	r3, [sl]
	  if(MOTER_PWM[0]>10000){
 8002aba:	682b      	ldr	r3, [r5, #0]
 8002abc:	42bb      	cmp	r3, r7
	  if(MOTER_PWM[1]>10000){
 8002abe:	686b      	ldr	r3, [r5, #4]
		  MOTER_PWM[0] = 10000;
 8002ac0:	bf88      	it	hi
 8002ac2:	602f      	strhi	r7, [r5, #0]
	  if(MOTER_PWM[1]>10000){
 8002ac4:	4543      	cmp	r3, r8
	  if(MOTER_PWM[2]>10000){
 8002ac6:	68ab      	ldr	r3, [r5, #8]
		  MOTER_PWM[1] = 10000;
 8002ac8:	bf88      	it	hi
 8002aca:	f8c5 8004 	strhi.w	r8, [r5, #4]
	  if(MOTER_PWM[2]>10000){
 8002ace:	42bb      	cmp	r3, r7
	  if(MOTER_PWM[3]>10000){
 8002ad0:	68eb      	ldr	r3, [r5, #12]
		  MOTER_PWM[2] = 10000;
 8002ad2:	bf88      	it	hi
 8002ad4:	60af      	strhi	r7, [r5, #8]
	  if(MOTER_PWM[3]>10000){
 8002ad6:	4543      	cmp	r3, r8
	  TIM1->CCR1 = MOTER_PWM[0];
 8002ad8:	682b      	ldr	r3, [r5, #0]
		  MOTER_PWM[3] = 10000;
 8002ada:	bf88      	it	hi
 8002adc:	f8c5 800c 	strhi.w	r8, [r5, #12]
	  TIM1->CCR1 = MOTER_PWM[0];
 8002ae0:	6363      	str	r3, [r4, #52]	; 0x34
	  TIM1->CCR2 = MOTER_PWM[1];
 8002ae2:	686b      	ldr	r3, [r5, #4]
 8002ae4:	63a3      	str	r3, [r4, #56]	; 0x38
	  TIM1->CCR3 = MOTER_PWM[2];
 8002ae6:	68ab      	ldr	r3, [r5, #8]
 8002ae8:	63e3      	str	r3, [r4, #60]	; 0x3c
	  TIM1->CCR4 = MOTER_PWM[3];
 8002aea:	68eb      	ldr	r3, [r5, #12]
 8002aec:	6423      	str	r3, [r4, #64]	; 0x40
	  if(scan_start){
 8002aee:	e724      	b.n	800293a <main+0x122>
		  if(HAL_UART_Receive(&huart3, &rx3_start, 7, 10) == HAL_OK){
 8002af0:	230a      	movs	r3, #10
 8002af2:	2207      	movs	r2, #7
 8002af4:	4929      	ldr	r1, [pc, #164]	; (8002b9c <main+0x384>)
 8002af6:	481e      	ldr	r0, [pc, #120]	; (8002b70 <main+0x358>)
 8002af8:	f7ff fb2b 	bl	8002152 <HAL_UART_Receive>
 8002afc:	2800      	cmp	r0, #0
 8002afe:	f47f af61 	bne.w	80029c4 <main+0x1ac>
			 if (array_element_of_index_equal(rx3_start, scan_response, 7)){
 8002b02:	2207      	movs	r2, #7
 8002b04:	4926      	ldr	r1, [pc, #152]	; (8002ba0 <main+0x388>)
 8002b06:	4825      	ldr	r0, [pc, #148]	; (8002b9c <main+0x384>)
 8002b08:	f7ff fd4e 	bl	80025a8 <array_element_of_index_equal>
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	f43f af59 	beq.w	80029c4 <main+0x1ac>
				scan_start = true;
 8002b12:	2301      	movs	r3, #1
 8002b14:	7033      	strb	r3, [r6, #0]
 8002b16:	e755      	b.n	80029c4 <main+0x1ac>
	   else if(avg_DIFF < 0){
 8002b18:	d006      	beq.n	8002b28 <main+0x310>
		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_SET);
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	2110      	movs	r1, #16
 8002b1e:	481b      	ldr	r0, [pc, #108]	; (8002b8c <main+0x374>)
 8002b20:	f7fe fb34 	bl	800118c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_5,GPIO_PIN_RESET);
 8002b24:	2200      	movs	r2, #0
 8002b26:	e758      	b.n	80029da <main+0x1c2>
		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,GPIO_PIN_RESET);
 8002b28:	4632      	mov	r2, r6
 8002b2a:	2110      	movs	r1, #16
 8002b2c:	4817      	ldr	r0, [pc, #92]	; (8002b8c <main+0x374>)
 8002b2e:	f7fe fb2d 	bl	800118c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_5,GPIO_PIN_RESET);
 8002b32:	4632      	mov	r2, r6
 8002b34:	e751      	b.n	80029da <main+0x1c2>
 8002b36:	bf00      	nop
 8002b38:	200004f8 	.word	0x200004f8
 8002b3c:	40010000 	.word	0x40010000
 8002b40:	40020400 	.word	0x40020400
 8002b44:	40020c00 	.word	0x40020c00
 8002b48:	20000538 	.word	0x20000538
 8002b4c:	20000478 	.word	0x20000478
 8002b50:	200003f8 	.word	0x200003f8
 8002b54:	20000438 	.word	0x20000438
 8002b58:	200004b8 	.word	0x200004b8
 8002b5c:	200003e0 	.word	0x200003e0
 8002b60:	200005b8 	.word	0x200005b8
 8002b64:	200003ed 	.word	0x200003ed
 8002b68:	200000bc 	.word	0x200000bc
 8002b6c:	200003e1 	.word	0x200003e1
 8002b70:	20000578 	.word	0x20000578
 8002b74:	200000dc 	.word	0x200000dc
 8002b78:	200000dd 	.word	0x200000dd
 8002b7c:	200003f4 	.word	0x200003f4
 8002b80:	200003f6 	.word	0x200003f6
 8002b84:	200000e0 	.word	0x200000e0
 8002b88:	200000cc 	.word	0x200000cc
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40020800 	.word	0x40020800
 8002b94:	2000002c 	.word	0x2000002c
 8002b98:	2000002a 	.word	0x2000002a
 8002b9c:	200003e6 	.word	0x200003e6
 8002ba0:	20000022 	.word	0x20000022
 8002ba4:	200000de 	.word	0x200000de
		  else if(rx2_data == 2){
 8002ba8:	2e02      	cmp	r6, #2
 8002baa:	d13b      	bne.n	8002c24 <main+0x40c>
			  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13, GPIO_PIN_RESET);
 8002bac:	2200      	movs	r2, #0
 8002bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bb2:	4893      	ldr	r0, [pc, #588]	; (8002e00 <main+0x5e8>)
 8002bb4:	f7fe faea 	bl	800118c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, RESET);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2110      	movs	r1, #16
 8002bbc:	4891      	ldr	r0, [pc, #580]	; (8002e04 <main+0x5ec>)
 8002bbe:	f7fe fae5 	bl	800118c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, SET);
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	2120      	movs	r1, #32
 8002bc6:	488f      	ldr	r0, [pc, #572]	; (8002e04 <main+0x5ec>)
 8002bc8:	f7fe fae0 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bd2:	488d      	ldr	r0, [pc, #564]	; (8002e08 <main+0x5f0>)
 8002bd4:	f7fe fada 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bde:	488a      	ldr	r0, [pc, #552]	; (8002e08 <main+0x5f0>)
 8002be0:	f7fe fad4 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 8002be4:	2200      	movs	r2, #0
 8002be6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bea:	4887      	ldr	r0, [pc, #540]	; (8002e08 <main+0x5f0>)
 8002bec:	f7fe face 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bf6:	4884      	ldr	r0, [pc, #528]	; (8002e08 <main+0x5f0>)
 8002bf8:	f7fe fac8 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, RESET);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c02:	4882      	ldr	r0, [pc, #520]	; (8002e0c <main+0x5f4>)
 8002c04:	f7fe fac2 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c0e:	487f      	ldr	r0, [pc, #508]	; (8002e0c <main+0x5f4>)
 8002c10:	f7fe fabc 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, SET);
 8002c14:	2201      	movs	r2, #1
 8002c16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c1a:	487c      	ldr	r0, [pc, #496]	; (8002e0c <main+0x5f4>)
 8002c1c:	f7fe fab6 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);
 8002c20:	2200      	movs	r2, #0
 8002c22:	e722      	b.n	8002a6a <main+0x252>
		  else if(rx2_data == 3){
 8002c24:	2e03      	cmp	r6, #3
 8002c26:	f040 8086 	bne.w	8002d36 <main+0x51e>
			  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13, GPIO_PIN_SET);
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c30:	4873      	ldr	r0, [pc, #460]	; (8002e00 <main+0x5e8>)
 8002c32:	f7fe faab 	bl	800118c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, RESET);
 8002c36:	2200      	movs	r2, #0
 8002c38:	2110      	movs	r1, #16
 8002c3a:	4872      	ldr	r0, [pc, #456]	; (8002e04 <main+0x5ec>)
 8002c3c:	f7fe faa6 	bl	800118c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, RESET);
 8002c40:	2200      	movs	r2, #0
 8002c42:	2120      	movs	r1, #32
 8002c44:	486f      	ldr	r0, [pc, #444]	; (8002e04 <main+0x5ec>)
 8002c46:	f7fe faa1 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c50:	486d      	ldr	r0, [pc, #436]	; (8002e08 <main+0x5f0>)
 8002c52:	f7fe fa9b 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8002c56:	2200      	movs	r2, #0
 8002c58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c5c:	486a      	ldr	r0, [pc, #424]	; (8002e08 <main+0x5f0>)
 8002c5e:	f7fe fa95 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 8002c62:	2200      	movs	r2, #0
 8002c64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c68:	4867      	ldr	r0, [pc, #412]	; (8002e08 <main+0x5f0>)
 8002c6a:	f7fe fa8f 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c74:	4864      	ldr	r0, [pc, #400]	; (8002e08 <main+0x5f0>)
 8002c76:	f7fe fa89 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, SET);
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c80:	4862      	ldr	r0, [pc, #392]	; (8002e0c <main+0x5f4>)
 8002c82:	f7fe fa83 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 8002c86:	2200      	movs	r2, #0
 8002c88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c8c:	485f      	ldr	r0, [pc, #380]	; (8002e0c <main+0x5f4>)
 8002c8e:	f7fe fa7d 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, RESET);
 8002c92:	2200      	movs	r2, #0
 8002c94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c98:	485c      	ldr	r0, [pc, #368]	; (8002e0c <main+0x5f4>)
 8002c9a:	f7fe fa77 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, SET);
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ca4:	4859      	ldr	r0, [pc, #356]	; (8002e0c <main+0x5f4>)
 8002ca6:	f7fe fa71 	bl	800118c <HAL_GPIO_WritePin>
			 TIM1->CCR1 = speed_turn;
 8002caa:	4b59      	ldr	r3, [pc, #356]	; (8002e10 <main+0x5f8>)
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	6363      	str	r3, [r4, #52]	; 0x34
			 TIM1->CCR1 = 0;
 8002cb0:	2600      	movs	r6, #0
			 TIM1->CCR2 = speed_turn;
 8002cb2:	63a3      	str	r3, [r4, #56]	; 0x38
			 HAL_Delay(1000);
 8002cb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
			 TIM1->CCR3 = speed_turn;
 8002cb8:	63e3      	str	r3, [r4, #60]	; 0x3c
			 TIM1->CCR4 = speed_turn;
 8002cba:	6423      	str	r3, [r4, #64]	; 0x40
			 HAL_Delay(1000);
 8002cbc:	f7fe f8f6 	bl	8000eac <HAL_Delay>
			 TIM1->CCR1 = 0;
 8002cc0:	6366      	str	r6, [r4, #52]	; 0x34
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 8002cc2:	2201      	movs	r2, #1
			 TIM1->CCR2 = 0;
 8002cc4:	63a6      	str	r6, [r4, #56]	; 0x38
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 8002cc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
			 TIM1->CCR3 = 0;
 8002cca:	63e6      	str	r6, [r4, #60]	; 0x3c
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 8002ccc:	484e      	ldr	r0, [pc, #312]	; (8002e08 <main+0x5f0>)
			 TIM1->CCR4 = 0;
 8002cce:	6426      	str	r6, [r4, #64]	; 0x40
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 8002cd0:	f7fe fa5c 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8002cd4:	4632      	mov	r2, r6
 8002cd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cda:	484b      	ldr	r0, [pc, #300]	; (8002e08 <main+0x5f0>)
 8002cdc:	f7fe fa56 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ce6:	4848      	ldr	r0, [pc, #288]	; (8002e08 <main+0x5f0>)
 8002ce8:	f7fe fa50 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 8002cec:	4632      	mov	r2, r6
 8002cee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cf2:	4845      	ldr	r0, [pc, #276]	; (8002e08 <main+0x5f0>)
 8002cf4:	f7fe fa4a 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, SET);
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cfe:	4843      	ldr	r0, [pc, #268]	; (8002e0c <main+0x5f4>)
 8002d00:	f7fe fa44 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 8002d04:	4632      	mov	r2, r6
 8002d06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d0a:	4840      	ldr	r0, [pc, #256]	; (8002e0c <main+0x5f4>)
 8002d0c:	f7fe fa3e 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, SET);
 8002d10:	2201      	movs	r2, #1
 8002d12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d16:	483d      	ldr	r0, [pc, #244]	; (8002e0c <main+0x5f4>)
 8002d18:	f7fe fa38 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);
 8002d1c:	4632      	mov	r2, r6
 8002d1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d22:	483a      	ldr	r0, [pc, #232]	; (8002e0c <main+0x5f4>)
 8002d24:	f7fe fa32 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_UART_Transmit(&huart3, &scan_command, 2, 100);
 8002d28:	2364      	movs	r3, #100	; 0x64
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	4939      	ldr	r1, [pc, #228]	; (8002e14 <main+0x5fc>)
 8002d2e:	483a      	ldr	r0, [pc, #232]	; (8002e18 <main+0x600>)
 8002d30:	f7ff f9b0 	bl	8002094 <HAL_UART_Transmit>
 8002d34:	e6ae      	b.n	8002a94 <main+0x27c>
		  else if(rx2_data == 5 || rx2_data == 6){
 8002d36:	3e05      	subs	r6, #5
 8002d38:	2e01      	cmp	r6, #1
 8002d3a:	f63f aeab 	bhi.w	8002a94 <main+0x27c>
			  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d44:	482e      	ldr	r0, [pc, #184]	; (8002e00 <main+0x5e8>)
 8002d46:	f7fe fa21 	bl	800118c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, RESET);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2110      	movs	r1, #16
 8002d4e:	482d      	ldr	r0, [pc, #180]	; (8002e04 <main+0x5ec>)
 8002d50:	f7fe fa1c 	bl	800118c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, RESET);
 8002d54:	2200      	movs	r2, #0
 8002d56:	2120      	movs	r1, #32
 8002d58:	482a      	ldr	r0, [pc, #168]	; (8002e04 <main+0x5ec>)
			 avg_DIFF = 0;
 8002d5a:	2600      	movs	r6, #0
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, RESET);
 8002d5c:	f7fe fa16 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_UART_Transmit(&huart3, &stop_command, 2, 100);
 8002d60:	2364      	movs	r3, #100	; 0x64
 8002d62:	2202      	movs	r2, #2
 8002d64:	492d      	ldr	r1, [pc, #180]	; (8002e1c <main+0x604>)
 8002d66:	482c      	ldr	r0, [pc, #176]	; (8002e18 <main+0x600>)
 8002d68:	f7ff f994 	bl	8002094 <HAL_UART_Transmit>
			 avg_DIFF = 0;
 8002d6c:	f8a9 6000 	strh.w	r6, [r9]
			 HAL_Delay(1000);
 8002d70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
			 TIM1->CCR1 = 0;
 8002d74:	6366      	str	r6, [r4, #52]	; 0x34
			 TIM1->CCR2 = 0;
 8002d76:	63a6      	str	r6, [r4, #56]	; 0x38
			 TIM1->CCR3 = 0;
 8002d78:	63e6      	str	r6, [r4, #60]	; 0x3c
			 TIM1->CCR4 = 0;
 8002d7a:	6426      	str	r6, [r4, #64]	; 0x40
			 HAL_Delay(1000);
 8002d7c:	f7fe f896 	bl	8000eac <HAL_Delay>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 8002d80:	2201      	movs	r2, #1
 8002d82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d86:	4820      	ldr	r0, [pc, #128]	; (8002e08 <main+0x5f0>)
 8002d88:	f7fe fa00 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8002d8c:	4632      	mov	r2, r6
 8002d8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d92:	481d      	ldr	r0, [pc, #116]	; (8002e08 <main+0x5f0>)
 8002d94:	f7fe f9fa 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 8002d98:	4632      	mov	r2, r6
 8002d9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d9e:	481a      	ldr	r0, [pc, #104]	; (8002e08 <main+0x5f0>)
 8002da0:	f7fe f9f4 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 8002da4:	2201      	movs	r2, #1
 8002da6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002daa:	4817      	ldr	r0, [pc, #92]	; (8002e08 <main+0x5f0>)
 8002dac:	f7fe f9ee 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, SET);
 8002db0:	2201      	movs	r2, #1
 8002db2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002db6:	4815      	ldr	r0, [pc, #84]	; (8002e0c <main+0x5f4>)
 8002db8:	f7fe f9e8 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 8002dbc:	4632      	mov	r2, r6
 8002dbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dc2:	4812      	ldr	r0, [pc, #72]	; (8002e0c <main+0x5f4>)
 8002dc4:	f7fe f9e2 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, RESET);
 8002dc8:	4632      	mov	r2, r6
 8002dca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dce:	480f      	ldr	r0, [pc, #60]	; (8002e0c <main+0x5f4>)
 8002dd0:	f7fe f9dc 	bl	800118c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, SET);
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002dda:	480c      	ldr	r0, [pc, #48]	; (8002e0c <main+0x5f4>)
 8002ddc:	f7fe f9d6 	bl	800118c <HAL_GPIO_WritePin>
			 TIM1->CCR1 = speed_turn;
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <main+0x5f8>)
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	6363      	str	r3, [r4, #52]	; 0x34
			 HAL_Delay(1000);
 8002de6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
			 TIM1->CCR2 = speed_turn;
 8002dea:	63a3      	str	r3, [r4, #56]	; 0x38
			 TIM1->CCR3 = speed_turn;
 8002dec:	63e3      	str	r3, [r4, #60]	; 0x3c
			 TIM1->CCR4 = speed_turn;
 8002dee:	6423      	str	r3, [r4, #64]	; 0x40
			 HAL_Delay(1000);
 8002df0:	f7fe f85c 	bl	8000eac <HAL_Delay>
			 TIM1->CCR1 = 0;
 8002df4:	6366      	str	r6, [r4, #52]	; 0x34
			 TIM1->CCR2 = 0;
 8002df6:	63a6      	str	r6, [r4, #56]	; 0x38
			 TIM1->CCR3 = 0;
 8002df8:	63e6      	str	r6, [r4, #60]	; 0x3c
			 TIM1->CCR4 = 0;
 8002dfa:	6426      	str	r6, [r4, #64]	; 0x40
 8002dfc:	e64a      	b.n	8002a94 <main+0x27c>
 8002dfe:	bf00      	nop
 8002e00:	40020800 	.word	0x40020800
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40020400 	.word	0x40020400
 8002e0c:	40020c00 	.word	0x40020c00
 8002e10:	2000002e 	.word	0x2000002e
 8002e14:	20000020 	.word	0x20000020
 8002e18:	20000578 	.word	0x20000578
 8002e1c:	20000030 	.word	0x20000030

08002e20 <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  if(huart->Instance==USART2){
 8002e20:	6802      	ldr	r2, [r0, #0]
 8002e22:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <HAL_UART_RxCpltCallback+0x14>)
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d104      	bne.n	8002e32 <HAL_UART_RxCpltCallback+0x12>
     HAL_UART_Receive_IT(&huart2,&rx2_data,1);
 8002e28:	2201      	movs	r2, #1
 8002e2a:	4903      	ldr	r1, [pc, #12]	; (8002e38 <HAL_UART_RxCpltCallback+0x18>)
 8002e2c:	4803      	ldr	r0, [pc, #12]	; (8002e3c <HAL_UART_RxCpltCallback+0x1c>)
 8002e2e:	f7ff b9f2 	b.w	8002216 <HAL_UART_Receive_IT>
 8002e32:	4770      	bx	lr
 8002e34:	40004400 	.word	0x40004400
 8002e38:	200003e0 	.word	0x200003e0
 8002e3c:	200005b8 	.word	0x200005b8

08002e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e40:	4770      	bx	lr
	...

08002e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e44:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e46:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <HAL_MspInit+0x3c>)
 8002e48:	2100      	movs	r1, #0
 8002e4a:	9100      	str	r1, [sp, #0]
 8002e4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e52:	645a      	str	r2, [r3, #68]	; 0x44
 8002e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e56:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002e5a:	9200      	str	r2, [sp, #0]
 8002e5c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e5e:	9101      	str	r1, [sp, #4]
 8002e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e62:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e66:	641a      	str	r2, [r3, #64]	; 0x40
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002e70:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e72:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002e74:	f7fe f82e 	bl	8000ed4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e78:	b003      	add	sp, #12
 8002e7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e7e:	bf00      	nop
 8002e80:	40023800 	.word	0x40023800

08002e84 <NMI_Handler>:
 8002e84:	4770      	bx	lr

08002e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e86:	e7fe      	b.n	8002e86 <HardFault_Handler>

08002e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e88:	e7fe      	b.n	8002e88 <MemManage_Handler>

08002e8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e8a:	e7fe      	b.n	8002e8a <BusFault_Handler>

08002e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e8c:	e7fe      	b.n	8002e8c <UsageFault_Handler>

08002e8e <SVC_Handler>:
 8002e8e:	4770      	bx	lr

08002e90 <DebugMon_Handler>:
 8002e90:	4770      	bx	lr

08002e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e92:	4770      	bx	lr

08002e94 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e94:	f7fd bff8 	b.w	8000e88 <HAL_IncTick>

08002e98 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e98:	4801      	ldr	r0, [pc, #4]	; (8002ea0 <USART2_IRQHandler+0x8>)
 8002e9a:	f7ff ba23 	b.w	80022e4 <HAL_UART_IRQHandler>
 8002e9e:	bf00      	nop
 8002ea0:	200005b8 	.word	0x200005b8

08002ea4 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ea4:	4801      	ldr	r0, [pc, #4]	; (8002eac <TIM6_DAC_IRQHandler+0x8>)
 8002ea6:	f7fe bccc 	b.w	8001842 <HAL_TIM_IRQHandler>
 8002eaa:	bf00      	nop
 8002eac:	200004b8 	.word	0x200004b8

08002eb0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <SystemInit+0x18>)
 8002eb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002eb6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002eba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ebe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ecc:	b510      	push	{r4, lr}
 8002ece:	b08c      	sub	sp, #48	; 0x30
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	2224      	movs	r2, #36	; 0x24
 8002ed4:	a803      	add	r0, sp, #12
 8002ed6:	f000 fb49 	bl	800356c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim2.Instance = TIM2;
 8002eda:	4812      	ldr	r0, [pc, #72]	; (8002f24 <MX_TIM2_Init+0x58>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002edc:	2400      	movs	r4, #0
  htim2.Instance = TIM2;
 8002ede:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
 8002ee2:	e880 0018 	stmia.w	r0, {r3, r4}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 65535;
 8002ee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eea:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002eec:	2303      	movs	r3, #3
 8002eee:	9303      	str	r3, [sp, #12]
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002ef0:	a903      	add	r1, sp, #12
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ef2:	2301      	movs	r3, #1
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ef4:	9401      	str	r4, [sp, #4]
 8002ef6:	9402      	str	r4, [sp, #8]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ef8:	6084      	str	r4, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002efa:	6104      	str	r4, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002efc:	6184      	str	r4, [r0, #24]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002efe:	9305      	str	r3, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f00:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002f02:	f7fe fddb 	bl	8001abc <HAL_TIM_Encoder_Init>
 8002f06:	b108      	cbz	r0, 8002f0c <MX_TIM2_Init+0x40>
  {
    Error_Handler();
 8002f08:	f7ff ff9a 	bl	8002e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f0c:	a901      	add	r1, sp, #4
 8002f0e:	4805      	ldr	r0, [pc, #20]	; (8002f24 <MX_TIM2_Init+0x58>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f10:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f12:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f14:	f7fe ff82 	bl	8001e1c <HAL_TIMEx_MasterConfigSynchronization>
 8002f18:	b108      	cbz	r0, 8002f1e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8002f1a:	f7ff ff91 	bl	8002e40 <Error_Handler>
  }

}
 8002f1e:	b00c      	add	sp, #48	; 0x30
 8002f20:	bd10      	pop	{r4, pc}
 8002f22:	bf00      	nop
 8002f24:	20000538 	.word	0x20000538

08002f28 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002f28:	b510      	push	{r4, lr}
 8002f2a:	b08c      	sub	sp, #48	; 0x30
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	2224      	movs	r2, #36	; 0x24
 8002f30:	a803      	add	r0, sp, #12
 8002f32:	f000 fb1b 	bl	800356c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim3.Instance = TIM3;
 8002f36:	4811      	ldr	r0, [pc, #68]	; (8002f7c <MX_TIM3_Init+0x54>)
 8002f38:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <MX_TIM3_Init+0x58>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f3a:	2400      	movs	r4, #0
  htim3.Init.Prescaler = 0;
 8002f3c:	e880 0018 	stmia.w	r0, {r3, r4}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
 8002f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f44:	60c3      	str	r3, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002f46:	2303      	movs	r3, #3
 8002f48:	9303      	str	r3, [sp, #12]
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002f4a:	a903      	add	r1, sp, #12
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f4c:	2301      	movs	r3, #1
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f4e:	9401      	str	r4, [sp, #4]
 8002f50:	9402      	str	r4, [sp, #8]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f52:	6084      	str	r4, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f54:	6104      	str	r4, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f56:	6184      	str	r4, [r0, #24]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f58:	9305      	str	r3, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f5a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002f5c:	f7fe fdae 	bl	8001abc <HAL_TIM_Encoder_Init>
 8002f60:	b108      	cbz	r0, 8002f66 <MX_TIM3_Init+0x3e>
  {
    Error_Handler();
 8002f62:	f7ff ff6d 	bl	8002e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f66:	a901      	add	r1, sp, #4
 8002f68:	4804      	ldr	r0, [pc, #16]	; (8002f7c <MX_TIM3_Init+0x54>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f6a:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f6c:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f6e:	f7fe ff55 	bl	8001e1c <HAL_TIMEx_MasterConfigSynchronization>
 8002f72:	b108      	cbz	r0, 8002f78 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002f74:	f7ff ff64 	bl	8002e40 <Error_Handler>
  }

}
 8002f78:	b00c      	add	sp, #48	; 0x30
 8002f7a:	bd10      	pop	{r4, pc}
 8002f7c:	20000478 	.word	0x20000478
 8002f80:	40000400 	.word	0x40000400

08002f84 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002f84:	b510      	push	{r4, lr}
 8002f86:	b08c      	sub	sp, #48	; 0x30
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f88:	2100      	movs	r1, #0
 8002f8a:	2224      	movs	r2, #36	; 0x24
 8002f8c:	a803      	add	r0, sp, #12
 8002f8e:	f000 faed 	bl	800356c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim4.Instance = TIM4;
 8002f92:	4811      	ldr	r0, [pc, #68]	; (8002fd8 <MX_TIM4_Init+0x54>)
 8002f94:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <MX_TIM4_Init+0x58>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f96:	2400      	movs	r4, #0
  htim4.Init.Prescaler = 0;
 8002f98:	e880 0018 	stmia.w	r0, {r3, r4}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 65535;
 8002f9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fa0:	60c3      	str	r3, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	9303      	str	r3, [sp, #12]
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002fa6:	a903      	add	r1, sp, #12
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002fa8:	2301      	movs	r3, #1
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002faa:	9401      	str	r4, [sp, #4]
 8002fac:	9402      	str	r4, [sp, #8]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fae:	6084      	str	r4, [r0, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fb0:	6104      	str	r4, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fb2:	6184      	str	r4, [r0, #24]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002fb4:	9305      	str	r3, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002fb6:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002fb8:	f7fe fd80 	bl	8001abc <HAL_TIM_Encoder_Init>
 8002fbc:	b108      	cbz	r0, 8002fc2 <MX_TIM4_Init+0x3e>
  {
    Error_Handler();
 8002fbe:	f7ff ff3f 	bl	8002e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002fc2:	a901      	add	r1, sp, #4
 8002fc4:	4804      	ldr	r0, [pc, #16]	; (8002fd8 <MX_TIM4_Init+0x54>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fc6:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fc8:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002fca:	f7fe ff27 	bl	8001e1c <HAL_TIMEx_MasterConfigSynchronization>
 8002fce:	b108      	cbz	r0, 8002fd4 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8002fd0:	f7ff ff36 	bl	8002e40 <Error_Handler>
  }

}
 8002fd4:	b00c      	add	sp, #48	; 0x30
 8002fd6:	bd10      	pop	{r4, pc}
 8002fd8:	200003f8 	.word	0x200003f8
 8002fdc:	40000800 	.word	0x40000800

08002fe0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002fe0:	b510      	push	{r4, lr}
 8002fe2:	b08c      	sub	sp, #48	; 0x30
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	2224      	movs	r2, #36	; 0x24
 8002fe8:	a803      	add	r0, sp, #12
 8002fea:	f000 fabf 	bl	800356c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim5.Instance = TIM5;
 8002fee:	4811      	ldr	r0, [pc, #68]	; (8003034 <MX_TIM5_Init+0x54>)
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <MX_TIM5_Init+0x58>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ff2:	2400      	movs	r4, #0
  htim5.Init.Prescaler = 0;
 8002ff4:	e880 0018 	stmia.w	r0, {r3, r4}
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 65535;
 8002ff8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ffc:	60c3      	str	r3, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ffe:	2303      	movs	r3, #3
 8003000:	9303      	str	r3, [sp, #12]
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003002:	a903      	add	r1, sp, #12
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003004:	2301      	movs	r3, #1
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003006:	9401      	str	r4, [sp, #4]
 8003008:	9402      	str	r4, [sp, #8]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800300a:	6084      	str	r4, [r0, #8]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800300c:	6104      	str	r4, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800300e:	6184      	str	r4, [r0, #24]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003010:	9305      	str	r3, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003012:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003014:	f7fe fd52 	bl	8001abc <HAL_TIM_Encoder_Init>
 8003018:	b108      	cbz	r0, 800301e <MX_TIM5_Init+0x3e>
  {
    Error_Handler();
 800301a:	f7ff ff11 	bl	8002e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800301e:	a901      	add	r1, sp, #4
 8003020:	4804      	ldr	r0, [pc, #16]	; (8003034 <MX_TIM5_Init+0x54>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003022:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003024:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003026:	f7fe fef9 	bl	8001e1c <HAL_TIMEx_MasterConfigSynchronization>
 800302a:	b108      	cbz	r0, 8003030 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 800302c:	f7ff ff08 	bl	8002e40 <Error_Handler>
  }

}
 8003030:	b00c      	add	sp, #48	; 0x30
 8003032:	bd10      	pop	{r4, pc}
 8003034:	20000438 	.word	0x20000438
 8003038:	40000c00 	.word	0x40000c00

0800303c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800303c:	b513      	push	{r0, r1, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 4199;
 800303e:	4a0f      	ldr	r2, [pc, #60]	; (800307c <MX_TIM6_Init+0x40>)
  htim6.Instance = TIM6;
 8003040:	480f      	ldr	r0, [pc, #60]	; (8003080 <MX_TIM6_Init+0x44>)
  htim6.Init.Prescaler = 4199;
 8003042:	f241 0367 	movw	r3, #4199	; 0x1067
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003046:	2400      	movs	r4, #0
  htim6.Init.Prescaler = 4199;
 8003048:	e880 000c 	stmia.w	r0, {r2, r3}
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 999;
 800304c:	f240 33e7 	movw	r3, #999	; 0x3e7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003050:	9400      	str	r4, [sp, #0]
 8003052:	9401      	str	r4, [sp, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003054:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = 999;
 8003056:	60c3      	str	r3, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003058:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800305a:	f7fe fcfb 	bl	8001a54 <HAL_TIM_Base_Init>
 800305e:	b108      	cbz	r0, 8003064 <MX_TIM6_Init+0x28>
  {
    Error_Handler();
 8003060:	f7ff feee 	bl	8002e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003064:	4669      	mov	r1, sp
 8003066:	4806      	ldr	r0, [pc, #24]	; (8003080 <MX_TIM6_Init+0x44>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003068:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800306a:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800306c:	f7fe fed6 	bl	8001e1c <HAL_TIMEx_MasterConfigSynchronization>
 8003070:	b108      	cbz	r0, 8003076 <MX_TIM6_Init+0x3a>
  {
    Error_Handler();
 8003072:	f7ff fee5 	bl	8002e40 <Error_Handler>
  }

}
 8003076:	b002      	add	sp, #8
 8003078:	bd10      	pop	{r4, pc}
 800307a:	bf00      	nop
 800307c:	40001000 	.word	0x40001000
 8003080:	200004b8 	.word	0x200004b8

08003084 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8003084:	6803      	ldr	r3, [r0, #0]
 8003086:	4a11      	ldr	r2, [pc, #68]	; (80030cc <HAL_TIM_Base_MspInit+0x48>)
 8003088:	4293      	cmp	r3, r2
{
 800308a:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 800308c:	d10d      	bne.n	80030aa <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800308e:	2300      	movs	r3, #0
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <HAL_TIM_Base_MspInit+0x4c>)
 8003094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	645a      	str	r2, [r3, #68]	; 0x44
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80030a6:	b002      	add	sp, #8
 80030a8:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM6)
 80030aa:	4a0a      	ldr	r2, [pc, #40]	; (80030d4 <HAL_TIM_Base_MspInit+0x50>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d1fa      	bne.n	80030a6 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80030b0:	2300      	movs	r3, #0
 80030b2:	9301      	str	r3, [sp, #4]
 80030b4:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_TIM_Base_MspInit+0x4c>)
 80030b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030b8:	f042 0210 	orr.w	r2, r2, #16
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	9301      	str	r3, [sp, #4]
 80030c6:	9b01      	ldr	r3, [sp, #4]
}
 80030c8:	e7ed      	b.n	80030a6 <HAL_TIM_Base_MspInit+0x22>
 80030ca:	bf00      	nop
 80030cc:	40010000 	.word	0x40010000
 80030d0:	40023800 	.word	0x40023800
 80030d4:	40001000 	.word	0x40001000

080030d8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80030d8:	b570      	push	{r4, r5, r6, lr}
 80030da:	4604      	mov	r4, r0
 80030dc:	b08e      	sub	sp, #56	; 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030de:	2214      	movs	r2, #20
 80030e0:	2100      	movs	r1, #0
 80030e2:	a809      	add	r0, sp, #36	; 0x24
 80030e4:	f000 fa42 	bl	800356c <memset>
  if(tim_encoderHandle->Instance==TIM2)
 80030e8:	6823      	ldr	r3, [r4, #0]
 80030ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ee:	d136      	bne.n	800315e <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030f0:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80030f4:	2400      	movs	r4, #0
 80030f6:	9400      	str	r4, [sp, #0]
 80030f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030fa:	4848      	ldr	r0, [pc, #288]	; (800321c <HAL_TIM_Encoder_MspInit+0x144>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030fc:	f042 0201 	orr.w	r2, r2, #1
 8003100:	641a      	str	r2, [r3, #64]	; 0x40
 8003102:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003104:	f002 0201 	and.w	r2, r2, #1
 8003108:	9200      	str	r2, [sp, #0]
 800310a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800310c:	9401      	str	r4, [sp, #4]
 800310e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003110:	f042 0201 	orr.w	r2, r2, #1
 8003114:	631a      	str	r2, [r3, #48]	; 0x30
 8003116:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003118:	f002 0201 	and.w	r2, r2, #1
 800311c:	9201      	str	r2, [sp, #4]
 800311e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003120:	9402      	str	r4, [sp, #8]
 8003122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003124:	f042 0202 	orr.w	r2, r2, #2
 8003128:	631a      	str	r2, [r3, #48]	; 0x30
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	9302      	str	r3, [sp, #8]
 8003132:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003134:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003136:	2320      	movs	r3, #32
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003138:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800313a:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800313c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003140:	950d      	str	r5, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003142:	f7fd ff43 	bl	8000fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003146:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003148:	4835      	ldr	r0, [pc, #212]	; (8003220 <HAL_TIM_Encoder_MspInit+0x148>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800314a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003150:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003152:	950d      	str	r5, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003154:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003156:	f7fd ff39 	bl	8000fcc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800315a:	b00e      	add	sp, #56	; 0x38
 800315c:	bd70      	pop	{r4, r5, r6, pc}
  else if(tim_encoderHandle->Instance==TIM3)
 800315e:	4a31      	ldr	r2, [pc, #196]	; (8003224 <HAL_TIM_Encoder_MspInit+0x14c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d11d      	bne.n	80031a0 <HAL_TIM_Encoder_MspInit+0xc8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003164:	4b30      	ldr	r3, [pc, #192]	; (8003228 <HAL_TIM_Encoder_MspInit+0x150>)
 8003166:	2100      	movs	r1, #0
 8003168:	9103      	str	r1, [sp, #12]
 800316a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800316c:	f042 0202 	orr.w	r2, r2, #2
 8003170:	641a      	str	r2, [r3, #64]	; 0x40
 8003172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003174:	f002 0202 	and.w	r2, r2, #2
 8003178:	9203      	str	r2, [sp, #12]
 800317a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800317c:	9104      	str	r1, [sp, #16]
 800317e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003180:	f042 0201 	orr.w	r2, r2, #1
 8003184:	631a      	str	r2, [r3, #48]	; 0x30
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	9304      	str	r3, [sp, #16]
 800318e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003190:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003192:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003194:	2302      	movs	r3, #2
 8003196:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003198:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319a:	a909      	add	r1, sp, #36	; 0x24
 800319c:	481f      	ldr	r0, [pc, #124]	; (800321c <HAL_TIM_Encoder_MspInit+0x144>)
 800319e:	e7da      	b.n	8003156 <HAL_TIM_Encoder_MspInit+0x7e>
  else if(tim_encoderHandle->Instance==TIM4)
 80031a0:	4a22      	ldr	r2, [pc, #136]	; (800322c <HAL_TIM_Encoder_MspInit+0x154>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d11e      	bne.n	80031e4 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031a6:	4b20      	ldr	r3, [pc, #128]	; (8003228 <HAL_TIM_Encoder_MspInit+0x150>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031a8:	4821      	ldr	r0, [pc, #132]	; (8003230 <HAL_TIM_Encoder_MspInit+0x158>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031aa:	2100      	movs	r1, #0
 80031ac:	9105      	str	r1, [sp, #20]
 80031ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031b0:	f042 0204 	orr.w	r2, r2, #4
 80031b4:	641a      	str	r2, [r3, #64]	; 0x40
 80031b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031b8:	f002 0204 	and.w	r2, r2, #4
 80031bc:	9205      	str	r2, [sp, #20]
 80031be:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031c0:	9106      	str	r1, [sp, #24]
 80031c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031c4:	f042 0208 	orr.w	r2, r2, #8
 80031c8:	631a      	str	r2, [r3, #48]	; 0x30
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	9306      	str	r3, [sp, #24]
 80031d2:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80031d4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80031d8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031da:	2302      	movs	r3, #2
 80031dc:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80031de:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031e0:	a909      	add	r1, sp, #36	; 0x24
 80031e2:	e7b8      	b.n	8003156 <HAL_TIM_Encoder_MspInit+0x7e>
  else if(tim_encoderHandle->Instance==TIM5)
 80031e4:	4a13      	ldr	r2, [pc, #76]	; (8003234 <HAL_TIM_Encoder_MspInit+0x15c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d1b7      	bne.n	800315a <HAL_TIM_Encoder_MspInit+0x82>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80031ea:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <HAL_TIM_Encoder_MspInit+0x150>)
 80031ec:	2100      	movs	r1, #0
 80031ee:	9107      	str	r1, [sp, #28]
 80031f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f2:	f042 0208 	orr.w	r2, r2, #8
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40
 80031f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031fa:	f002 0208 	and.w	r2, r2, #8
 80031fe:	9207      	str	r2, [sp, #28]
 8003200:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003202:	9108      	str	r1, [sp, #32]
 8003204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	631a      	str	r2, [r3, #48]	; 0x30
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	9308      	str	r3, [sp, #32]
 8003214:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003216:	2303      	movs	r3, #3
 8003218:	e7bb      	b.n	8003192 <HAL_TIM_Encoder_MspInit+0xba>
 800321a:	bf00      	nop
 800321c:	40020000 	.word	0x40020000
 8003220:	40020400 	.word	0x40020400
 8003224:	40000400 	.word	0x40000400
 8003228:	40023800 	.word	0x40023800
 800322c:	40000800 	.word	0x40000800
 8003230:	40020c00 	.word	0x40020c00
 8003234:	40000c00 	.word	0x40000c00

08003238 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003238:	b510      	push	{r4, lr}
 800323a:	4604      	mov	r4, r0
 800323c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800323e:	2214      	movs	r2, #20
 8003240:	2100      	movs	r1, #0
 8003242:	a801      	add	r0, sp, #4
 8003244:	f000 f992 	bl	800356c <memset>
  if(timHandle->Instance==TIM1)
 8003248:	6822      	ldr	r2, [r4, #0]
 800324a:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <HAL_TIM_MspPostInit+0x4c>)
 800324c:	429a      	cmp	r2, r3
 800324e:	d116      	bne.n	800327e <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003250:	2300      	movs	r3, #0
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <HAL_TIM_MspPostInit+0x50>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003256:	480d      	ldr	r0, [pc, #52]	; (800328c <HAL_TIM_MspPostInit+0x54>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003258:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800325a:	f042 0210 	orr.w	r2, r2, #16
 800325e:	631a      	str	r2, [r3, #48]	; 0x30
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800326a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800326e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003270:	2302      	movs	r3, #2
 8003272:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003274:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003276:	2301      	movs	r3, #1
 8003278:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800327a:	f7fd fea7 	bl	8000fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800327e:	b006      	add	sp, #24
 8003280:	bd10      	pop	{r4, pc}
 8003282:	bf00      	nop
 8003284:	40010000 	.word	0x40010000
 8003288:	40023800 	.word	0x40023800
 800328c:	40021000 	.word	0x40021000

08003290 <MX_TIM1_Init>:
{
 8003290:	b510      	push	{r4, lr}
 8003292:	b096      	sub	sp, #88	; 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003294:	2210      	movs	r2, #16
 8003296:	2100      	movs	r1, #0
 8003298:	a803      	add	r0, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800329a:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800329c:	f000 f966 	bl	800356c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032a0:	221c      	movs	r2, #28
 80032a2:	4621      	mov	r1, r4
 80032a4:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032a8:	9401      	str	r4, [sp, #4]
 80032aa:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032ac:	f000 f95e 	bl	800356c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80032b0:	2220      	movs	r2, #32
 80032b2:	4621      	mov	r1, r4
 80032b4:	a80e      	add	r0, sp, #56	; 0x38
 80032b6:	f000 f959 	bl	800356c <memset>
  htim1.Instance = TIM1;
 80032ba:	4834      	ldr	r0, [pc, #208]	; (800338c <MX_TIM1_Init+0xfc>)
  htim1.Init.Prescaler = 168-1;
 80032bc:	4a34      	ldr	r2, [pc, #208]	; (8003390 <MX_TIM1_Init+0x100>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032be:	6084      	str	r4, [r0, #8]
  htim1.Init.Prescaler = 168-1;
 80032c0:	23a7      	movs	r3, #167	; 0xa7
 80032c2:	e880 000c 	stmia.w	r0, {r2, r3}
  htim1.Init.Period = 10000-1;
 80032c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80032ca:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032cc:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80032ce:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032d0:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80032d2:	f7fe fbbf 	bl	8001a54 <HAL_TIM_Base_Init>
 80032d6:	b108      	cbz	r0, 80032dc <MX_TIM1_Init+0x4c>
    Error_Handler();
 80032d8:	f7ff fdb2 	bl	8002e40 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80032e0:	a903      	add	r1, sp, #12
 80032e2:	482a      	ldr	r0, [pc, #168]	; (800338c <MX_TIM1_Init+0xfc>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032e4:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80032e6:	f7fe fcd7 	bl	8001c98 <HAL_TIM_ConfigClockSource>
 80032ea:	b108      	cbz	r0, 80032f0 <MX_TIM1_Init+0x60>
    Error_Handler();
 80032ec:	f7ff fda8 	bl	8002e40 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80032f0:	4826      	ldr	r0, [pc, #152]	; (800338c <MX_TIM1_Init+0xfc>)
 80032f2:	f7fe fbc9 	bl	8001a88 <HAL_TIM_PWM_Init>
 80032f6:	b108      	cbz	r0, 80032fc <MX_TIM1_Init+0x6c>
    Error_Handler();
 80032f8:	f7ff fda2 	bl	8002e40 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032fc:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032fe:	a901      	add	r1, sp, #4
 8003300:	4822      	ldr	r0, [pc, #136]	; (800338c <MX_TIM1_Init+0xfc>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003302:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003304:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003306:	f7fe fd89 	bl	8001e1c <HAL_TIMEx_MasterConfigSynchronization>
 800330a:	b108      	cbz	r0, 8003310 <MX_TIM1_Init+0x80>
    Error_Handler();
 800330c:	f7ff fd98 	bl	8002e40 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003310:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003312:	2200      	movs	r2, #0
 8003314:	a907      	add	r1, sp, #28
 8003316:	481d      	ldr	r0, [pc, #116]	; (800338c <MX_TIM1_Init+0xfc>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003318:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 800331a:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800331c:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800331e:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003320:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003322:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003324:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003326:	f7fe fc4b 	bl	8001bc0 <HAL_TIM_PWM_ConfigChannel>
 800332a:	b108      	cbz	r0, 8003330 <MX_TIM1_Init+0xa0>
    Error_Handler();
 800332c:	f7ff fd88 	bl	8002e40 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003330:	2204      	movs	r2, #4
 8003332:	a907      	add	r1, sp, #28
 8003334:	4815      	ldr	r0, [pc, #84]	; (800338c <MX_TIM1_Init+0xfc>)
 8003336:	f7fe fc43 	bl	8001bc0 <HAL_TIM_PWM_ConfigChannel>
 800333a:	b108      	cbz	r0, 8003340 <MX_TIM1_Init+0xb0>
    Error_Handler();
 800333c:	f7ff fd80 	bl	8002e40 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003340:	2208      	movs	r2, #8
 8003342:	a907      	add	r1, sp, #28
 8003344:	4811      	ldr	r0, [pc, #68]	; (800338c <MX_TIM1_Init+0xfc>)
 8003346:	f7fe fc3b 	bl	8001bc0 <HAL_TIM_PWM_ConfigChannel>
 800334a:	b108      	cbz	r0, 8003350 <MX_TIM1_Init+0xc0>
    Error_Handler();
 800334c:	f7ff fd78 	bl	8002e40 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003350:	220c      	movs	r2, #12
 8003352:	a907      	add	r1, sp, #28
 8003354:	480d      	ldr	r0, [pc, #52]	; (800338c <MX_TIM1_Init+0xfc>)
 8003356:	f7fe fc33 	bl	8001bc0 <HAL_TIM_PWM_ConfigChannel>
 800335a:	b108      	cbz	r0, 8003360 <MX_TIM1_Init+0xd0>
    Error_Handler();
 800335c:	f7ff fd70 	bl	8002e40 <Error_Handler>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003360:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003362:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003366:	a90e      	add	r1, sp, #56	; 0x38
 8003368:	4808      	ldr	r0, [pc, #32]	; (800338c <MX_TIM1_Init+0xfc>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800336a:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800336c:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800336e:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.DeadTime = 0;
 8003370:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003372:	9312      	str	r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003374:	9213      	str	r2, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003376:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003378:	f7fe fd92 	bl	8001ea0 <HAL_TIMEx_ConfigBreakDeadTime>
 800337c:	b108      	cbz	r0, 8003382 <MX_TIM1_Init+0xf2>
    Error_Handler();
 800337e:	f7ff fd5f 	bl	8002e40 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8003382:	4802      	ldr	r0, [pc, #8]	; (800338c <MX_TIM1_Init+0xfc>)
 8003384:	f7ff ff58 	bl	8003238 <HAL_TIM_MspPostInit>
}
 8003388:	b016      	add	sp, #88	; 0x58
 800338a:	bd10      	pop	{r4, pc}
 800338c:	200004f8 	.word	0x200004f8
 8003390:	40010000 	.word	0x40010000

08003394 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003394:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8003396:	480b      	ldr	r0, [pc, #44]	; (80033c4 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 9600;
 8003398:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <MX_USART2_UART_Init+0x34>)
 800339a:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
 800339e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033a2:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033a4:	2300      	movs	r3, #0
 80033a6:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033a8:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033aa:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033ac:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ae:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033b0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033b2:	f7fe fe41 	bl	8002038 <HAL_UART_Init>
 80033b6:	b118      	cbz	r0, 80033c0 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80033b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80033bc:	f7ff bd40 	b.w	8002e40 <Error_Handler>
 80033c0:	bd08      	pop	{r3, pc}
 80033c2:	bf00      	nop
 80033c4:	200005b8 	.word	0x200005b8
 80033c8:	40004400 	.word	0x40004400

080033cc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80033cc:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 80033ce:	480b      	ldr	r0, [pc, #44]	; (80033fc <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <MX_USART3_UART_Init+0x34>)
 80033d2:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80033d6:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033da:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80033dc:	2300      	movs	r3, #0
 80033de:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033e0:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033e2:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033e4:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033e6:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033e8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033ea:	f7fe fe25 	bl	8002038 <HAL_UART_Init>
 80033ee:	b118      	cbz	r0, 80033f8 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80033f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80033f4:	f7ff bd24 	b.w	8002e40 <Error_Handler>
 80033f8:	bd08      	pop	{r3, pc}
 80033fa:	bf00      	nop
 80033fc:	20000578 	.word	0x20000578
 8003400:	40004800 	.word	0x40004800

08003404 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003404:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003406:	2214      	movs	r2, #20
{
 8003408:	b08a      	sub	sp, #40	; 0x28
 800340a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800340c:	2100      	movs	r1, #0
 800340e:	eb0d 0002 	add.w	r0, sp, r2
 8003412:	f000 f8ab 	bl	800356c <memset>
  if(uartHandle->Instance==USART2)
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	4a25      	ldr	r2, [pc, #148]	; (80034b0 <HAL_UART_MspInit+0xac>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d123      	bne.n	8003466 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800341e:	4b25      	ldr	r3, [pc, #148]	; (80034b4 <HAL_UART_MspInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003420:	4825      	ldr	r0, [pc, #148]	; (80034b8 <HAL_UART_MspInit+0xb4>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003422:	2100      	movs	r1, #0
 8003424:	9101      	str	r1, [sp, #4]
 8003426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003428:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800342c:	641a      	str	r2, [r3, #64]	; 0x40
 800342e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003430:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003434:	9201      	str	r2, [sp, #4]
 8003436:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003438:	9102      	str	r1, [sp, #8]
 800343a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800343c:	f042 0201 	orr.w	r2, r2, #1
 8003440:	631a      	str	r2, [r3, #48]	; 0x30
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	9302      	str	r3, [sp, #8]
 800344a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800344c:	230c      	movs	r3, #12
 800344e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003450:	2302      	movs	r3, #2
 8003452:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003454:	2303      	movs	r3, #3
 8003456:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003458:	2307      	movs	r3, #7
 800345a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800345c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800345e:	f7fd fdb5 	bl	8000fcc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003462:	b00a      	add	sp, #40	; 0x28
 8003464:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART3)
 8003466:	4a15      	ldr	r2, [pc, #84]	; (80034bc <HAL_UART_MspInit+0xb8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d1fa      	bne.n	8003462 <HAL_UART_MspInit+0x5e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800346c:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <HAL_UART_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800346e:	4814      	ldr	r0, [pc, #80]	; (80034c0 <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003470:	2100      	movs	r1, #0
 8003472:	9103      	str	r1, [sp, #12]
 8003474:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003476:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800347a:	641a      	str	r2, [r3, #64]	; 0x40
 800347c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800347e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003482:	9203      	str	r2, [sp, #12]
 8003484:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003486:	9104      	str	r1, [sp, #16]
 8003488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800348a:	f042 0202 	orr.w	r2, r2, #2
 800348e:	631a      	str	r2, [r3, #48]	; 0x30
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	9304      	str	r3, [sp, #16]
 8003498:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800349a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800349e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a0:	2302      	movs	r3, #2
 80034a2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a4:	2303      	movs	r3, #3
 80034a6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034a8:	2307      	movs	r3, #7
 80034aa:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ac:	a905      	add	r1, sp, #20
 80034ae:	e7d6      	b.n	800345e <HAL_UART_MspInit+0x5a>
 80034b0:	40004400 	.word	0x40004400
 80034b4:	40023800 	.word	0x40023800
 80034b8:	40020000 	.word	0x40020000
 80034bc:	40004800 	.word	0x40004800
 80034c0:	40020400 	.word	0x40020400

080034c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80034c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80034c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80034ca:	e003      	b.n	80034d4 <LoopCopyDataInit>

080034cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80034ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80034d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80034d2:	3104      	adds	r1, #4

080034d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80034d4:	480b      	ldr	r0, [pc, #44]	; (8003504 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80034d6:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80034d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80034da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80034dc:	d3f6      	bcc.n	80034cc <CopyDataInit>
  ldr  r2, =_sbss
 80034de:	4a0b      	ldr	r2, [pc, #44]	; (800350c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80034e0:	e002      	b.n	80034e8 <LoopFillZerobss>

080034e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80034e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80034e4:	f842 3b04 	str.w	r3, [r2], #4

080034e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80034e8:	4b09      	ldr	r3, [pc, #36]	; (8003510 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80034ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80034ec:	d3f9      	bcc.n	80034e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034ee:	f7ff fcdf 	bl	8002eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034f2:	f000 f817 	bl	8003524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034f6:	f7ff f98f 	bl	8002818 <main>
  bx  lr    
 80034fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80034fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003500:	080039e8 	.word	0x080039e8
  ldr  r0, =_sdata
 8003504:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003508:	200000a0 	.word	0x200000a0
  ldr  r2, =_sbss
 800350c:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 8003510:	200005f8 	.word	0x200005f8

08003514 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003514:	e7fe      	b.n	8003514 <ADC_IRQHandler>
	...

08003518 <__errno>:
 8003518:	4b01      	ldr	r3, [pc, #4]	; (8003520 <__errno+0x8>)
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	20000038 	.word	0x20000038

08003524 <__libc_init_array>:
 8003524:	b570      	push	{r4, r5, r6, lr}
 8003526:	4e0d      	ldr	r6, [pc, #52]	; (800355c <__libc_init_array+0x38>)
 8003528:	4c0d      	ldr	r4, [pc, #52]	; (8003560 <__libc_init_array+0x3c>)
 800352a:	1ba4      	subs	r4, r4, r6
 800352c:	10a4      	asrs	r4, r4, #2
 800352e:	2500      	movs	r5, #0
 8003530:	42a5      	cmp	r5, r4
 8003532:	d109      	bne.n	8003548 <__libc_init_array+0x24>
 8003534:	4e0b      	ldr	r6, [pc, #44]	; (8003564 <__libc_init_array+0x40>)
 8003536:	4c0c      	ldr	r4, [pc, #48]	; (8003568 <__libc_init_array+0x44>)
 8003538:	f000 fa1a 	bl	8003970 <_init>
 800353c:	1ba4      	subs	r4, r4, r6
 800353e:	10a4      	asrs	r4, r4, #2
 8003540:	2500      	movs	r5, #0
 8003542:	42a5      	cmp	r5, r4
 8003544:	d105      	bne.n	8003552 <__libc_init_array+0x2e>
 8003546:	bd70      	pop	{r4, r5, r6, pc}
 8003548:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800354c:	4798      	blx	r3
 800354e:	3501      	adds	r5, #1
 8003550:	e7ee      	b.n	8003530 <__libc_init_array+0xc>
 8003552:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003556:	4798      	blx	r3
 8003558:	3501      	adds	r5, #1
 800355a:	e7f2      	b.n	8003542 <__libc_init_array+0x1e>
 800355c:	080039e0 	.word	0x080039e0
 8003560:	080039e0 	.word	0x080039e0
 8003564:	080039e0 	.word	0x080039e0
 8003568:	080039e4 	.word	0x080039e4

0800356c <memset>:
 800356c:	4402      	add	r2, r0
 800356e:	4603      	mov	r3, r0
 8003570:	4293      	cmp	r3, r2
 8003572:	d100      	bne.n	8003576 <memset+0xa>
 8003574:	4770      	bx	lr
 8003576:	f803 1b01 	strb.w	r1, [r3], #1
 800357a:	e7f9      	b.n	8003570 <memset+0x4>
 800357c:	0000      	movs	r0, r0
	...

08003580 <exp>:
 8003580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003582:	ed2d 8b02 	vpush	{d8}
 8003586:	4e38      	ldr	r6, [pc, #224]	; (8003668 <exp+0xe8>)
 8003588:	b08b      	sub	sp, #44	; 0x2c
 800358a:	ec55 4b10 	vmov	r4, r5, d0
 800358e:	f000 f873 	bl	8003678 <__ieee754_exp>
 8003592:	f996 3000 	ldrsb.w	r3, [r6]
 8003596:	eeb0 8a40 	vmov.f32	s16, s0
 800359a:	eef0 8a60 	vmov.f32	s17, s1
 800359e:	3301      	adds	r3, #1
 80035a0:	d02c      	beq.n	80035fc <exp+0x7c>
 80035a2:	ec45 4b10 	vmov	d0, r4, r5
 80035a6:	f000 f9d9 	bl	800395c <finite>
 80035aa:	b338      	cbz	r0, 80035fc <exp+0x7c>
 80035ac:	a32a      	add	r3, pc, #168	; (adr r3, 8003658 <exp+0xd8>)
 80035ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b2:	4620      	mov	r0, r4
 80035b4:	4629      	mov	r1, r5
 80035b6:	f7fd fa4f 	bl	8000a58 <__aeabi_dcmpgt>
 80035ba:	4607      	mov	r7, r0
 80035bc:	2800      	cmp	r0, #0
 80035be:	d030      	beq.n	8003622 <exp+0xa2>
 80035c0:	2303      	movs	r3, #3
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	4b29      	ldr	r3, [pc, #164]	; (800366c <exp+0xec>)
 80035c6:	9301      	str	r3, [sp, #4]
 80035c8:	2300      	movs	r3, #0
 80035ca:	9308      	str	r3, [sp, #32]
 80035cc:	f996 3000 	ldrsb.w	r3, [r6]
 80035d0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80035d4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80035d8:	b9c3      	cbnz	r3, 800360c <exp+0x8c>
 80035da:	4b25      	ldr	r3, [pc, #148]	; (8003670 <exp+0xf0>)
 80035dc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80035e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80035e4:	4668      	mov	r0, sp
 80035e6:	f000 f9c1 	bl	800396c <matherr>
 80035ea:	b1a8      	cbz	r0, 8003618 <exp+0x98>
 80035ec:	9b08      	ldr	r3, [sp, #32]
 80035ee:	b11b      	cbz	r3, 80035f8 <exp+0x78>
 80035f0:	f7ff ff92 	bl	8003518 <__errno>
 80035f4:	9b08      	ldr	r3, [sp, #32]
 80035f6:	6003      	str	r3, [r0, #0]
 80035f8:	ed9d 8b06 	vldr	d8, [sp, #24]
 80035fc:	eeb0 0a48 	vmov.f32	s0, s16
 8003600:	eef0 0a68 	vmov.f32	s1, s17
 8003604:	b00b      	add	sp, #44	; 0x2c
 8003606:	ecbd 8b02 	vpop	{d8}
 800360a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800360c:	4919      	ldr	r1, [pc, #100]	; (8003674 <exp+0xf4>)
 800360e:	2000      	movs	r0, #0
 8003610:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d1e5      	bne.n	80035e4 <exp+0x64>
 8003618:	f7ff ff7e 	bl	8003518 <__errno>
 800361c:	2322      	movs	r3, #34	; 0x22
 800361e:	6003      	str	r3, [r0, #0]
 8003620:	e7e4      	b.n	80035ec <exp+0x6c>
 8003622:	a30f      	add	r3, pc, #60	; (adr r3, 8003660 <exp+0xe0>)
 8003624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003628:	4620      	mov	r0, r4
 800362a:	4629      	mov	r1, r5
 800362c:	f7fd f9f6 	bl	8000a1c <__aeabi_dcmplt>
 8003630:	2800      	cmp	r0, #0
 8003632:	d0e3      	beq.n	80035fc <exp+0x7c>
 8003634:	2304      	movs	r3, #4
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	4b0c      	ldr	r3, [pc, #48]	; (800366c <exp+0xec>)
 800363a:	9301      	str	r3, [sp, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	2300      	movs	r3, #0
 8003640:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003644:	9708      	str	r7, [sp, #32]
 8003646:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800364a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800364e:	f996 3000 	ldrsb.w	r3, [r6]
 8003652:	e7df      	b.n	8003614 <exp+0x94>
 8003654:	f3af 8000 	nop.w
 8003658:	fefa39ef 	.word	0xfefa39ef
 800365c:	40862e42 	.word	0x40862e42
 8003660:	d52d3051 	.word	0xd52d3051
 8003664:	c0874910 	.word	0xc0874910
 8003668:	2000009c 	.word	0x2000009c
 800366c:	080039a0 	.word	0x080039a0
 8003670:	47efffff 	.word	0x47efffff
 8003674:	7ff00000 	.word	0x7ff00000

08003678 <__ieee754_exp>:
 8003678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800367c:	ec55 4b10 	vmov	r4, r5, d0
 8003680:	4aad      	ldr	r2, [pc, #692]	; (8003938 <__ieee754_exp+0x2c0>)
 8003682:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8003686:	4297      	cmp	r7, r2
 8003688:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800368c:	f240 80af 	bls.w	80037ee <__ieee754_exp+0x176>
 8003690:	4aaa      	ldr	r2, [pc, #680]	; (800393c <__ieee754_exp+0x2c4>)
 8003692:	4297      	cmp	r7, r2
 8003694:	d915      	bls.n	80036c2 <__ieee754_exp+0x4a>
 8003696:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800369a:	4323      	orrs	r3, r4
 800369c:	d009      	beq.n	80036b2 <__ieee754_exp+0x3a>
 800369e:	ee10 2a10 	vmov	r2, s0
 80036a2:	462b      	mov	r3, r5
 80036a4:	4620      	mov	r0, r4
 80036a6:	4629      	mov	r1, r5
 80036a8:	f7fc fd94 	bl	80001d4 <__adddf3>
 80036ac:	4604      	mov	r4, r0
 80036ae:	460d      	mov	r5, r1
 80036b0:	e002      	b.n	80036b8 <__ieee754_exp+0x40>
 80036b2:	b10e      	cbz	r6, 80036b8 <__ieee754_exp+0x40>
 80036b4:	2400      	movs	r4, #0
 80036b6:	2500      	movs	r5, #0
 80036b8:	ec45 4b10 	vmov	d0, r4, r5
 80036bc:	b003      	add	sp, #12
 80036be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036c2:	a387      	add	r3, pc, #540	; (adr r3, 80038e0 <__ieee754_exp+0x268>)
 80036c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c8:	ee10 0a10 	vmov	r0, s0
 80036cc:	4629      	mov	r1, r5
 80036ce:	f7fd f9c3 	bl	8000a58 <__aeabi_dcmpgt>
 80036d2:	b138      	cbz	r0, 80036e4 <__ieee754_exp+0x6c>
 80036d4:	a384      	add	r3, pc, #528	; (adr r3, 80038e8 <__ieee754_exp+0x270>)
 80036d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036da:	4610      	mov	r0, r2
 80036dc:	4619      	mov	r1, r3
 80036de:	f7fc ff2b 	bl	8000538 <__aeabi_dmul>
 80036e2:	e7e3      	b.n	80036ac <__ieee754_exp+0x34>
 80036e4:	a382      	add	r3, pc, #520	; (adr r3, 80038f0 <__ieee754_exp+0x278>)
 80036e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ea:	4620      	mov	r0, r4
 80036ec:	4629      	mov	r1, r5
 80036ee:	f7fd f995 	bl	8000a1c <__aeabi_dcmplt>
 80036f2:	2800      	cmp	r0, #0
 80036f4:	d1de      	bne.n	80036b4 <__ieee754_exp+0x3c>
 80036f6:	4b92      	ldr	r3, [pc, #584]	; (8003940 <__ieee754_exp+0x2c8>)
 80036f8:	429f      	cmp	r7, r3
 80036fa:	ea4f 07c6 	mov.w	r7, r6, lsl #3
 80036fe:	f200 808e 	bhi.w	800381e <__ieee754_exp+0x1a6>
 8003702:	4b90      	ldr	r3, [pc, #576]	; (8003944 <__ieee754_exp+0x2cc>)
 8003704:	443b      	add	r3, r7
 8003706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370a:	4620      	mov	r0, r4
 800370c:	4629      	mov	r1, r5
 800370e:	f7fc fd5f 	bl	80001d0 <__aeabi_dsub>
 8003712:	4b8d      	ldr	r3, [pc, #564]	; (8003948 <__ieee754_exp+0x2d0>)
 8003714:	441f      	add	r7, r3
 8003716:	ed97 7b00 	vldr	d7, [r7]
 800371a:	ed8d 7b00 	vstr	d7, [sp]
 800371e:	4682      	mov	sl, r0
 8003720:	f1c6 0001 	rsb	r0, r6, #1
 8003724:	468b      	mov	fp, r1
 8003726:	1b86      	subs	r6, r0, r6
 8003728:	e9dd 2300 	ldrd	r2, r3, [sp]
 800372c:	4650      	mov	r0, sl
 800372e:	4659      	mov	r1, fp
 8003730:	f7fc fd4e 	bl	80001d0 <__aeabi_dsub>
 8003734:	4604      	mov	r4, r0
 8003736:	460d      	mov	r5, r1
 8003738:	4622      	mov	r2, r4
 800373a:	462b      	mov	r3, r5
 800373c:	4620      	mov	r0, r4
 800373e:	4629      	mov	r1, r5
 8003740:	f7fc fefa 	bl	8000538 <__aeabi_dmul>
 8003744:	a36c      	add	r3, pc, #432	; (adr r3, 80038f8 <__ieee754_exp+0x280>)
 8003746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374a:	4680      	mov	r8, r0
 800374c:	4689      	mov	r9, r1
 800374e:	f7fc fef3 	bl	8000538 <__aeabi_dmul>
 8003752:	a36b      	add	r3, pc, #428	; (adr r3, 8003900 <__ieee754_exp+0x288>)
 8003754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003758:	f7fc fd3a 	bl	80001d0 <__aeabi_dsub>
 800375c:	4642      	mov	r2, r8
 800375e:	464b      	mov	r3, r9
 8003760:	f7fc feea 	bl	8000538 <__aeabi_dmul>
 8003764:	a368      	add	r3, pc, #416	; (adr r3, 8003908 <__ieee754_exp+0x290>)
 8003766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376a:	f7fc fd33 	bl	80001d4 <__adddf3>
 800376e:	4642      	mov	r2, r8
 8003770:	464b      	mov	r3, r9
 8003772:	f7fc fee1 	bl	8000538 <__aeabi_dmul>
 8003776:	a366      	add	r3, pc, #408	; (adr r3, 8003910 <__ieee754_exp+0x298>)
 8003778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377c:	f7fc fd28 	bl	80001d0 <__aeabi_dsub>
 8003780:	4642      	mov	r2, r8
 8003782:	464b      	mov	r3, r9
 8003784:	f7fc fed8 	bl	8000538 <__aeabi_dmul>
 8003788:	a363      	add	r3, pc, #396	; (adr r3, 8003918 <__ieee754_exp+0x2a0>)
 800378a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378e:	f7fc fd21 	bl	80001d4 <__adddf3>
 8003792:	4642      	mov	r2, r8
 8003794:	464b      	mov	r3, r9
 8003796:	f7fc fecf 	bl	8000538 <__aeabi_dmul>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	4620      	mov	r0, r4
 80037a0:	4629      	mov	r1, r5
 80037a2:	f7fc fd15 	bl	80001d0 <__aeabi_dsub>
 80037a6:	4680      	mov	r8, r0
 80037a8:	4689      	mov	r9, r1
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4620      	mov	r0, r4
 80037b0:	4629      	mov	r1, r5
 80037b2:	2e00      	cmp	r6, #0
 80037b4:	d162      	bne.n	800387c <__ieee754_exp+0x204>
 80037b6:	f7fc febf 	bl	8000538 <__aeabi_dmul>
 80037ba:	2200      	movs	r2, #0
 80037bc:	4606      	mov	r6, r0
 80037be:	460f      	mov	r7, r1
 80037c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037c4:	4640      	mov	r0, r8
 80037c6:	4649      	mov	r1, r9
 80037c8:	f7fc fd02 	bl	80001d0 <__aeabi_dsub>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4630      	mov	r0, r6
 80037d2:	4639      	mov	r1, r7
 80037d4:	f7fc ffda 	bl	800078c <__aeabi_ddiv>
 80037d8:	4622      	mov	r2, r4
 80037da:	462b      	mov	r3, r5
 80037dc:	f7fc fcf8 	bl	80001d0 <__aeabi_dsub>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	2000      	movs	r0, #0
 80037e6:	4959      	ldr	r1, [pc, #356]	; (800394c <__ieee754_exp+0x2d4>)
 80037e8:	f7fc fcf2 	bl	80001d0 <__aeabi_dsub>
 80037ec:	e75e      	b.n	80036ac <__ieee754_exp+0x34>
 80037ee:	4b58      	ldr	r3, [pc, #352]	; (8003950 <__ieee754_exp+0x2d8>)
 80037f0:	429f      	cmp	r7, r3
 80037f2:	d880      	bhi.n	80036f6 <__ieee754_exp+0x7e>
 80037f4:	4b57      	ldr	r3, [pc, #348]	; (8003954 <__ieee754_exp+0x2dc>)
 80037f6:	429f      	cmp	r7, r3
 80037f8:	d83c      	bhi.n	8003874 <__ieee754_exp+0x1fc>
 80037fa:	a33b      	add	r3, pc, #236	; (adr r3, 80038e8 <__ieee754_exp+0x270>)
 80037fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003800:	ee10 0a10 	vmov	r0, s0
 8003804:	4629      	mov	r1, r5
 8003806:	f7fc fce5 	bl	80001d4 <__adddf3>
 800380a:	2200      	movs	r2, #0
 800380c:	4b4f      	ldr	r3, [pc, #316]	; (800394c <__ieee754_exp+0x2d4>)
 800380e:	f7fd f923 	bl	8000a58 <__aeabi_dcmpgt>
 8003812:	b388      	cbz	r0, 8003878 <__ieee754_exp+0x200>
 8003814:	2200      	movs	r2, #0
 8003816:	4b4d      	ldr	r3, [pc, #308]	; (800394c <__ieee754_exp+0x2d4>)
 8003818:	4620      	mov	r0, r4
 800381a:	4629      	mov	r1, r5
 800381c:	e744      	b.n	80036a8 <__ieee754_exp+0x30>
 800381e:	4e4e      	ldr	r6, [pc, #312]	; (8003958 <__ieee754_exp+0x2e0>)
 8003820:	a33f      	add	r3, pc, #252	; (adr r3, 8003920 <__ieee754_exp+0x2a8>)
 8003822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003826:	443e      	add	r6, r7
 8003828:	4620      	mov	r0, r4
 800382a:	4629      	mov	r1, r5
 800382c:	f7fc fe84 	bl	8000538 <__aeabi_dmul>
 8003830:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003834:	f7fc fcce 	bl	80001d4 <__adddf3>
 8003838:	f7fd f918 	bl	8000a6c <__aeabi_d2iz>
 800383c:	4606      	mov	r6, r0
 800383e:	f7fc fe15 	bl	800046c <__aeabi_i2d>
 8003842:	a339      	add	r3, pc, #228	; (adr r3, 8003928 <__ieee754_exp+0x2b0>)
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	4680      	mov	r8, r0
 800384a:	4689      	mov	r9, r1
 800384c:	f7fc fe74 	bl	8000538 <__aeabi_dmul>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4620      	mov	r0, r4
 8003856:	4629      	mov	r1, r5
 8003858:	f7fc fcba 	bl	80001d0 <__aeabi_dsub>
 800385c:	a334      	add	r3, pc, #208	; (adr r3, 8003930 <__ieee754_exp+0x2b8>)
 800385e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003862:	4682      	mov	sl, r0
 8003864:	468b      	mov	fp, r1
 8003866:	4640      	mov	r0, r8
 8003868:	4649      	mov	r1, r9
 800386a:	f7fc fe65 	bl	8000538 <__aeabi_dmul>
 800386e:	e9cd 0100 	strd	r0, r1, [sp]
 8003872:	e759      	b.n	8003728 <__ieee754_exp+0xb0>
 8003874:	2600      	movs	r6, #0
 8003876:	e75f      	b.n	8003738 <__ieee754_exp+0xc0>
 8003878:	4606      	mov	r6, r0
 800387a:	e75d      	b.n	8003738 <__ieee754_exp+0xc0>
 800387c:	f7fc fe5c 	bl	8000538 <__aeabi_dmul>
 8003880:	4642      	mov	r2, r8
 8003882:	4604      	mov	r4, r0
 8003884:	460d      	mov	r5, r1
 8003886:	464b      	mov	r3, r9
 8003888:	2000      	movs	r0, #0
 800388a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800388e:	f7fc fc9f 	bl	80001d0 <__aeabi_dsub>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4620      	mov	r0, r4
 8003898:	4629      	mov	r1, r5
 800389a:	f7fc ff77 	bl	800078c <__aeabi_ddiv>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80038a6:	f7fc fc93 	bl	80001d0 <__aeabi_dsub>
 80038aa:	4652      	mov	r2, sl
 80038ac:	465b      	mov	r3, fp
 80038ae:	f7fc fc8f 	bl	80001d0 <__aeabi_dsub>
 80038b2:	460b      	mov	r3, r1
 80038b4:	4602      	mov	r2, r0
 80038b6:	4925      	ldr	r1, [pc, #148]	; (800394c <__ieee754_exp+0x2d4>)
 80038b8:	2000      	movs	r0, #0
 80038ba:	f7fc fc89 	bl	80001d0 <__aeabi_dsub>
 80038be:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
 80038c2:	429e      	cmp	r6, r3
 80038c4:	db02      	blt.n	80038cc <__ieee754_exp+0x254>
 80038c6:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 80038ca:	e6ef      	b.n	80036ac <__ieee754_exp+0x34>
 80038cc:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
 80038d0:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 80038d4:	2200      	movs	r2, #0
 80038d6:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80038da:	e700      	b.n	80036de <__ieee754_exp+0x66>
 80038dc:	f3af 8000 	nop.w
 80038e0:	fefa39ef 	.word	0xfefa39ef
 80038e4:	40862e42 	.word	0x40862e42
 80038e8:	8800759c 	.word	0x8800759c
 80038ec:	7e37e43c 	.word	0x7e37e43c
 80038f0:	d52d3051 	.word	0xd52d3051
 80038f4:	c0874910 	.word	0xc0874910
 80038f8:	72bea4d0 	.word	0x72bea4d0
 80038fc:	3e663769 	.word	0x3e663769
 8003900:	c5d26bf1 	.word	0xc5d26bf1
 8003904:	3ebbbd41 	.word	0x3ebbbd41
 8003908:	af25de2c 	.word	0xaf25de2c
 800390c:	3f11566a 	.word	0x3f11566a
 8003910:	16bebd93 	.word	0x16bebd93
 8003914:	3f66c16c 	.word	0x3f66c16c
 8003918:	5555553e 	.word	0x5555553e
 800391c:	3fc55555 	.word	0x3fc55555
 8003920:	652b82fe 	.word	0x652b82fe
 8003924:	3ff71547 	.word	0x3ff71547
 8003928:	fee00000 	.word	0xfee00000
 800392c:	3fe62e42 	.word	0x3fe62e42
 8003930:	35793c76 	.word	0x35793c76
 8003934:	3dea39ef 	.word	0x3dea39ef
 8003938:	40862e41 	.word	0x40862e41
 800393c:	7fefffff 	.word	0x7fefffff
 8003940:	3ff0a2b1 	.word	0x3ff0a2b1
 8003944:	080039b8 	.word	0x080039b8
 8003948:	080039c8 	.word	0x080039c8
 800394c:	3ff00000 	.word	0x3ff00000
 8003950:	3fd62e42 	.word	0x3fd62e42
 8003954:	3e2fffff 	.word	0x3e2fffff
 8003958:	080039a8 	.word	0x080039a8

0800395c <finite>:
 800395c:	ee10 3a90 	vmov	r3, s1
 8003960:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8003964:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8003968:	0fc0      	lsrs	r0, r0, #31
 800396a:	4770      	bx	lr

0800396c <matherr>:
 800396c:	2000      	movs	r0, #0
 800396e:	4770      	bx	lr

08003970 <_init>:
 8003970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003972:	bf00      	nop
 8003974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003976:	bc08      	pop	{r3}
 8003978:	469e      	mov	lr, r3
 800397a:	4770      	bx	lr

0800397c <_fini>:
 800397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397e:	bf00      	nop
 8003980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003982:	bc08      	pop	{r3}
 8003984:	469e      	mov	lr, r3
 8003986:	4770      	bx	lr
